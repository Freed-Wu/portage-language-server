{"NORMAL": ["NORMAL = \"normal\"\nDefines color used for some words occuring in other contexts than those below.", "color.map"], "BAD": ["BAD = \"red\"\nDefines color used for some words occuring in bad context.", "color.map"], "BRACKET": ["BRACKET = \"blue\"\nDefines color used for brackets.", "color.map"], "GOOD": ["GOOD = \"green\"\nDefines color used for some words occuring in good context.", "color.map"], "HILITE": ["HILITE = \"teal\"\nDefines color used for highlighted words.", "color.map"], "INFORM": ["INFORM = \"darkgreen\"\nDefines color used for informational words.", "color.map"], "MERGE_LIST_PROGRESS": ["MERGE_LIST_PROGRESS = \"yellow\"\nDefines color used for numbers indicating merge progress.", "color.map"], "PKG_BLOCKER": ["PKG_BLOCKER = \"red\"\nDefines color used for unsatisfied blockers.", "color.map"], "PKG_BLOCKER_SATISFIED": ["PKG_BLOCKER_SATISFIED = \"teal\"\nDefines color used for satisfied blockers.", "color.map"], "PKG_MERGE": ["PKG_MERGE = \"darkgreen\"\nDefines color used for packages planned to be merged.", "color.map"], "PKG_MERGE_SYSTEM": ["PKG_MERGE_SYSTEM = \"darkgreen\"\nDefines color used for system packages planned to be merged.", "color.map"], "PKG_MERGE_WORLD": ["PKG_MERGE_WORLD = \"green\"\nDefines color used for world packages planned to be merged.", "color.map"], "PKG_BINARY_MERGE": ["PKG_BINARY_MERGE = \"purple\"\nDefines color used for packages planned to be merged using a binary package.", "color.map"], "PKG_BINARY_MERGE_SYSTEM": ["PKG_BINARY_MERGE_SYSTEM = \"purple\"\nDefines color used for system packages planned to be merged using a binary package.", "color.map"], "PKG_BINARY_MERGE_WORLD": ["PKG_BINARY_MERGE_WORLD = \"fuchsia\"\nDefines color used for world packages planned to be merged using a binary package.", "color.map"], "PKG_NOMERGE": ["PKG_NOMERGE = \"teal\"\nDefines color used for packages not planned to be merged.", "color.map"], "PKG_NOMERGE_SYSTEM": ["PKG_NOMERGE_SYSTEM = \"teal\"\nDefines color used for system packages not planned to be merged.", "color.map"], "PKG_NOMERGE_WORLD": ["PKG_NOMERGE_WORLD = \"blue\"\nDefines color used for world packages not planned to be merged.", "color.map"], "PKG_UNINSTALL": ["PKG_UNINSTALL = \"red\"\nDefines color used for packages planned to be uninstalled in order to resolve conflicts.", "color.map"], "PROMPT_CHOICE_DEFAULT": ["PROMPT_CHOICE_DEFAULT = \"green\"\nDefines color used for the default choice at a prompt.", "color.map"], "PROMPT_CHOICE_OTHER": ["PROMPT_CHOICE_OTHER = \"red\"\nDefines color used for a non-default choice at a prompt.", "color.map"], "SECURITY_WARN": ["SECURITY_WARN = \"red\"\nDefines color used for security warnings.", "color.map"], "UNMERGE_WARN": ["UNMERGE_WARN = \"red\"\nDefines color used for unmerge warnings.", "color.map"], "WARN": ["WARN = \"yellow\"\nDefines color used for warnings.", "color.map"], "ACCEPT_CHOSTS": ["ACCEPT_CHOSTS = [space delimited list of CHOST\nvalues]\nSpecifies acceptable CHOST values. Regular expression syntax is supported, so it is necessary to escape CHOST characters if they have special meaning in regular expressions. Defaults to the value of $CHOST.", "make.conf"], "ACCEPT_KEYWORDS": ["ACCEPT_KEYWORDS = [space delimited list of\nKEYWORDS]\nEnable testing of ebuilds that have not yet been deemed 'stable'. Users of the 'x86' architecture would set this to '~x86' while ppc users would set this to '~ppc'. This is an incremental variable. Only define a ~arch. Defaults to the value of $ARCH.", "make.conf"], "ACCEPT_LICENSE": ["ACCEPT_LICENSE = [space delimited list of\nlicenses or groups]\nThis variable is used to mask packages based on licensing restrictions. It may contain both license and group names, where group names are prefixed with the '@' symbol. License groups are defined in the license_groups file (see portage(5)). In addition to license and group names, the * and -* wildcard tokens are also supported. Refer to GLEP 23 for further information: https://www.gentoo.org/glep/glep-0023.html. Defaults to the value defined in the profile. Examples:", "make.conf"], "ACCEPT_PROPERTIES": ["ACCEPT_PROPERTIES = [space delimited list of\nproperties]\nThis variable is used to mask packages based on PROPERTIES restrictions. In addition to property names, the * and -* wildcard tokens are also supported. This variable can be temporarily overridden using the --accept-properties option of emerge(1). See ebuild(5) for more information about PROPERTIES. Defaults to the value of *. Examples:", "make.conf"], "ACCEPT_RESTRICT": ["ACCEPT_RESTRICT = [space delimited list of\nRESTRICT tokens]\nThis variable is used to mask packages based on RESTRICT tokens. In addition to RESTRICT tokens, the * and -* wildcard tokens are also supported. This variable can be temporarily overridden using the --accept-restrict option of emerge(1). See ebuild(5) for more information about RESTRICT. Defaults to the value of *. Examples:", "make.conf"], "BINPKG_FORMAT": ["BINPKG_FORMAT\nThis variable sets the format used for tar binary packages. Possible values are xpak or gpkg. If BINPKG_FORMAT is set to xpak, packages will have the file extension .tbz2 for any compression type for historical reasons. If BINPKG_FORMAT is set to xpak, and FEATURES=\"binpkg-multi-instance\" is set, packages will have the file extension .xpak. If BINPKG_FORMAT is set to gpkg, packages will have the file extension .gpkg.", "make.conf"], "BINPKG_COMPRESS": ["BINPKG_COMPRESS = \"compression\"\nThis variable is used to determine the compression used for binary packages. Supported settings and compression algorithms are: bzip2, gzip, lz4, lzip, lzop, xz, zstd. See note for BINPKG_FORMAT on file suffix. Defaults to \"zstd\". Example:", "make.conf"], "BINPKG_COMPRESS_FLAGS": ["BINPKG_COMPRESS_FLAGS = \"arguments for\ncompression command\"\nThis variable is used to add additional arguments to the compression command selected by BINPKG_COMPRESS. Defaults to \"\". Example:", "make.conf"], "BINPKG_COMPRESS_FLAGS_[format]": ["BINPKG_COMPRESS_FLAGS_[format] = \"arguments for\n[format] compression command\"\nThis variable is used to add additional arguments only for the specified [format] compression command selected by BINPKG_COMPRESS. BINPKG_COMPRESS_FLAGS will be ignored when using [format] compression. Example:", "make.conf"], "BINPKG_GPG_SIGNING_BASE_COMMAND": ["BINPKG_GPG_SIGNING_BASE_COMMAND = \"GPG command\nand arguments [PORTAGE_CONFIG]\"\nThe base command will be used for all signing operations. Portage will replace [PORTAGE_CONFIG] under different operations. Please do not add arguments that can be configured independently. Defaults to \"/usr/bin/flock /run/lock/portage-binpkg-gpg.lock /usr/bin/gpg --sign --armor [PORTAGE_CONFIG]\".", "make.conf"], "BINPKG_GPG_SIGNING_DIGEST=": ["BINPKG_GPG_SIGNING_DIGEST= = \"GPG supported\ndigest\"\nThe digest that will be used for signature. Defaults to \"SHA512\"", "make.conf"], "BINPKG_GPG_SIGNING_GPG_HOME": ["BINPKG_GPG_SIGNING_GPG_HOME = [path]\nThe GPG home where the signing private key located. Defaults to \"/root/.gnupg\"", "make.conf"], "BINPKG_GPG_SIGNING_KEY": ["BINPKG_GPG_SIGNING_KEY = \"GPG key ID\"\nGPG key ID used to sign binary packages, must exists in BINPKG_GPG_SIGNING_GPG_HOME. Defaults to \"\" Example: \"0x40DCF18E97150795!\"", "make.conf"], "BINPKG_GPG_VERIFY_BASE_COMMAND=": ["BINPKG_GPG_VERIFY_BASE_COMMAND= = \"GPG command\nand arguments\"\nThe base command will be used for all verify operations. Portage will replace [PORTAGE_CONFIG] and [SIGNATURE] under different operations. Please do not add arguments that can be configured independently. Defaults to \"/usr/bin/gpg --verify --batch --no-tty --no-auto-check-trustdb --status-fd 2 [PORTAGE_CONFIG] [SIGNATURE]\"", "make.conf"], "BINPKG_GPG_VERIFY_GPG_HOME": ["BINPKG_GPG_VERIFY_GPG_HOME = [path]\nThe GPG home where the trusted keys located. Please make sure the target directory is globally readable, as the user will be dropped to nobody during verification. Defaults to \"/etc/portage/gnupg\"", "make.conf"], "CBUILD": ["CBUILD\nThis variable is passed by the ebuild scripts to the configure as --build=${CBUILD} only if it is defined. Do not set this yourself unless you know what you are doing.", "make.conf"], "CCACHE_DIR": ["CCACHE_DIR = [path]\nDefines the location of the ccache working directory. See the ccache(1) man page for more information. Defaults to /var/tmp/ccache", "make.conf"], "CCACHE_SIZE": ["CCACHE_SIZE = \"size\"\nThis controls the space use limitations for ccache. See the -M flag in the ccache(1) man page for more information.", "make.conf"], "CFLAGS CXXFLAGS": ["CFLAGS CXXFLAGS\nUse these variables to set the desired optimization/CPU instruction settings for applications that you compile. These two variables are passed to the C and C++ compilers, respectively. (CXX is used to refer to the C++ compiler within many buildsystems.) Nearly all ebuild files will take advantage of your custom settings, resulting in a Gentoo Linux that is fully customized to your specifications. Please use sane settings as some packages will fail to compile/run if the optimizations are too extreme.", "make.conf"], "CHOST": ["CHOST\nThis variable is passed by the ebuild scripts to the configure step as --host=${CHOST}. This way you can force the build-host.", "make.conf"], "CLEAN_DELAY": ["CLEAN_DELAY = integer\nDetermines how long the countdown delay will be after running `emerge --unmerge`. Defaults to 5 seconds.", "make.conf"], "COLLISION_IGNORE": ["COLLISION_IGNORE = [space delimited list of\nfnmatch patterns]\nThis variable allows the user to disable collision-protect and protect-owned for specific fnmatch(3) patterns. For backward compatibility, directories that are listed without a fnmatch pattern will automatically have /* appended to them. Defaults to \"/lib/modules/* *.py[co]\".", "make.conf"], "CONFIG_PROTECT": ["CONFIG_PROTECT = [space delimited list of files\nand/or directories]\nAll files and/or directories that are defined here will have \"config file protection\" enabled for them. See the CONFIGURATION FILES section of emerge(1) for more information.", "make.conf"], "CONFIG_PROTECT_MASK": ["CONFIG_PROTECT_MASK = [space delimited list of\nfiles and/or directories]\nAll files and/or directories that are defined here will have \"config file protection\" disabled for them. See the CONFIGURATION FILES section of emerge(1) for more information.", "make.conf"], "CTARGET": ["CTARGET\nThis variable is passed by the ebuild scripts to the configure as --target=${CTARGET} only if it is defined.", "make.conf"], "DISTDIR": ["DISTDIR = [path]\nDefines the location of your local source file repository. After packages are built, it is safe to remove any and all files from this directory since they will be automatically fetched on demand for a given build. If you would like to selectively prune obsolete files from this directory, see eclean(1) from the gentoolkit package.", "make.conf"], "DOC_SYMLINKS_DIR": ["DOC_SYMLINKS_DIR\nIf this variable contains a directory then symlinks to html documentation will be installed into it.", "make.conf"], "EBEEP_IGNORE": ["EBEEP_IGNORE\nDefines whether or not to ignore audible beeps when displaying important informational messages. This variable is unset by default.", "make.conf"], "EMERGE_DEFAULT_OPTS": ["EMERGE_DEFAULT_OPTS\nOptions to append to the end of the emerge(1) command line on every invocation. These options will not be appended to the command line if --ignore-default-opts is specified.", "make.conf"], "EMERGE_LOG_DIR": ["EMERGE_LOG_DIR\nControls the location of emerge.log and emerge-fetch.log. Defaults to /var/log.", "make.conf"], "EMERGE_WARNING_DELAY": ["EMERGE_WARNING_DELAY = integer\nDetermines how long the countdown delay will be after running `emerge --unmerge` for a system package. Defaults to 10 seconds.", "make.conf"], "EPAUSE_IGNORE": ["EPAUSE_IGNORE\nDefines whether or not to ignore short pauses that occur when displaying important informational messages. This variable is unset by default. If it is set to any value pauses are ignored.", "make.conf"], "EXTRA_ECONF": ["EXTRA_ECONF = [configure options\nstring]\nContains additional options that econf will append to configure script arguments (see ebuild(5)).", "make.conf"], "FEATURES": ["FEATURES = \"sandbox\"\nDefines actions portage takes by default. This is an incremental variable. Most of these settings are for developer use, but some are available to non-developers as well. The sandbox feature is very important and should not be disabled by default.  assume-digests  When commiting work to cvs with repoman(1), assume that all existing SRC_URI digests are correct. This feature also affects digest generation via ebuild(1) and emerge(1) (emerge generates digests only when the digest feature is enabled). Existing digests for files that do not exist in ${DISTDIR} will be automatically assumed even when assume-digests is not enabled. If a file exists in ${DISTDIR} but its size does not match the existing digest, the digest will be regenerated regardless of whether or not assume-digests is enabled. The ebuild(1) digest command has a --force option that can be used to force regeneration of digests.  binpkg-docompress  Perform docompress (controllable file compression) before creating binary package. When this option is enabled (the default), documentation files are already compressed inside binary packages. When it is disabled, binary packages contain uncompressed documentation and Portage compresses it before installing.  binpkg-dostrip  Perform file stripping before creating binary package. When this option is enabled (the default), executables are already stripped inside binary packages. When it is disabled, binary packages contain unstripped executables and Portage strips (or splits) them before installing.   binpkg-dostrip must be enabled for installsources to work.  binpkg-ignore-signature  This will disable GPG signature check for all binary packages. Enable this could be dangerous if you get binary packages from remote site or use third party packages.  binpkg-logs  Keep logs from successful binary package merges. This is relevant only when PORTAGE_LOGDIR is set.  binpkg-multi-instance  Enable support for multiple binary package instances per ebuild. Having multiple instances is useful for a number of purposes, such as retaining builds that were built with different USE flags or linked against different versions of libraries. The location of any particular package within PKGDIR can be expressed as follows:   ${PKGDIR}/${CATEGORY}/${PN}/${PF}-${BUILD_ID}.xpak The build-id starts at 1 for the first build of a particular ebuild, and is incremented by 1 for each new build. It is possible to share a writable PKGDIR over NFS, and locking ensures that each package added to PKGDIR will have a unique build-id. It is not necessary to migrate an existing PKGDIR to the new layout, since portage is capable of working with a mixed PKGDIR layout, where packages using the old layout are allowed to remain in place. The new PKGDIR layout is backward-compatible with binhost clients running older portage, since the file format is identical, the per-package PATH attribute in the 'Packages' index directs them to download the file from the correct URI, and they automatically use BUILD_TIME metadata to select the latest builds. The eclean-pkg command can be used to prune old builds from PKGDIR. It is also possible to remove packages manually, and then run 'emaint --fix binhost' to update the ${PKGDIR}/Packages index. This feature is enabled by default.  binpkg-request-signature  Binary packages are requested to be signed by trusted GPG signature. Portage will reject to process any binary package without a valid GPG signature. The verify command is defined in BINPKG_GPG_VERIFY_COMMAND variable.  binpkg-signing  Binary packages will be signed by given GPG command. The signing command is defined in BINPKG_GPG_SIGNING_COMMAND variable.  buildpkg  Binary packages will be created for all packages that are merged. Also see quickpkg(1) and emerge(1) --buildpkg and --buildpkgonly options.  buildpkg-live  When this option is enabled (the default), buildpkg will exhibit the default behavior of building binary cache for all packages. When it is disabled, binary packages will not be created for live ebuilds.  buildsyspkg  Build binary packages for just packages in the system set.  candy  Enable a special progress indicator when emerge(1) is calculating dependencies.  case-insensitive-fs  Use case-insensitive file name comparisions when merging and unmerging files. Most users should not enable this feature, since most filesystems are case-sensitive. You should only enable this feature if you are using portage to install files to a case-insensitive filesystem.  ccache  Enable portage support for the ccache package. If the ccache dir is not present in the user's environment, then portage will default to ${PORTAGE_TMPDIR}/ccache.   Warning: This feature is known to cause numerous compilation failures. Sometimes ccache will retain stale code objects or corrupted files, which can lead to packages that cannot be emerged. If this happens (if you receive errors like \"File not recognized: File truncated\"), try recompiling the application with ccache disabled before reporting a bug. Unless you are doing development work, do not enable ccache.  cgroup  Use Linux control group to control processes spawned by ebuilds. This allows emerge to safely kill all subprocesses when ebuild phase exits.  clean-logs  Enable automatic execution of the command specified by the PORTAGE_LOGDIR_CLEAN variable. The default PORTAGE_LOGDIR_CLEAN setting will remove all files from PORTAGE_LOGDIR that were last modified at least 7 days ago.  collision-protect  A QA-feature to ensure that a package doesn't overwrite files it doesn't own. The COLLISION_IGNORE variable can be used to selectively disable this feature. Also see the related protect-owned feature.  compress-build-logs  The causes all build logs to be compressed while they are being written. Log file names have an extension that is appropriate for the compression type. Currently, only gzip(1) compression is supported, so build logs will have a '.gz' extension when this feature is enabled.  compress-index  If set then a compressed copy of 'Packages' index file will be written. This feature is intended for Gentoo binhosts using certain webservers (such as, but not limited to, Nginx with gzip_static module) to avoid redundant on-the-fly compression. The resulting file will be called 'Packages.gz' and its modification time will match that of 'Packages'.  compressdebug  Compress the debug sections in the split debug files with zlib to save space. See splitdebug for general split debug information (upon which this feature depends).  config-protect-if-modified  This causes the CONFIG_PROTECT behavior to be skipped for files that have not been modified since they were installed. This feature is enabled by default.  digest  Autogenerate digests for packages when running the emerge(1) or ebuild(1) commands. If the assume-digests feature is also enabled then existing SRC_URI digests will be reused whenever they are available.  distcc  Enable portage support for the distcc package.  distlocks  Portage uses lockfiles to ensure competing instances don't clobber each other's files. It covers saving distfiles to ${DISTDIR} and binpkgs to ${PKGDIR}.   This feature is enabled by default but may cause heartache on less intelligent remote filesystems like NFSv2 and some strangely configured Samba servers (oplocks off, NFS re-export). /usr/lib/portage/bin/clean_locks exists to help handle lock issues when a problem arises (normally due to a crash or disconnect).  downgrade-backup  When a package is downgraded to a lower version, call quickpkg(1) in order to create a backup of the installed version before it is unmerged (if a binary package of the same version does not already exist). Also see the related unmerge-backup feature.  ebuild-locks  Use locks to ensure that unsandboxed ebuild phases never execute concurrently. Also see parallel-install.  fail-clean  Clean up temporary files after a build failure. This is particularly useful if you have PORTAGE_TMPDIR on tmpfs. If this feature is enabled, you probably also want to enable PORTAGE_LOGDIR in order to save the build log. Both the ebuild(1) command and the noclean feature cause the fail-clean feature to be automatically disabled.  fakeroot  Enable fakeroot for the install and package phases when a non-root user runs the ebuild(1) command.  fixlafiles  Modifies .la files to not include other .la files and some other fixes (order of flags, duplicated entries, ...)  force-mirror  Only fetch files from configured mirrors, ignoring SRC_URI, except when mirror is in the ebuild(5) RESTRICT variable.  getbinpkg  Force emerges to always try to fetch files from the PORTAGE_BINHOST. See make.conf(5) for more information.  gpg-keepalive  Run GPG unlock command every 5 mins to avoid the passphrase expired. If your GPG is auto unlocked on login, you do not need this.  icecream  Enable portage support for the icecream package.  installsources  Install source code into /usr/src/debug/${CATEGORY}/${PF} (also see splitdebug). This feature works only if debugedit is installed, CFLAGS is set to include debug information (such as with the -ggdb flag) and binpkg-dostrip is enabled.  ipc-sandbox  Isolate the ebuild phase functions from host IPC namespace. Supported only on Linux. Requires IPC namespace support in kernel.  keeptemp  Do not delete the ${T} directory after the merge process.  keepwork  Do not delete the ${WORKDIR} directory after the merge process. ${WORKDIR} can then be reused since this feature disables most of the clean phase that runs prior to each build. Due to lack of proper cleanup, this feature can interfere with normal emerge operation and therefore it should not be left enabled for more than a short period of time.  lmirror  When mirror is enabled in FEATURES, fetch files even when mirror is also in the ebuild(5) RESTRICT variable. Do NOT use lmirror for clients that need to override RESTRICT when fetching from a local mirror, but instead use a \"local\" mirror setting in /etc/portage/mirrors, as described in portage(5).  merge-sync  After a package is merged or unmerged, sync relevant files to disk in order to avoid data-loss in the event of a power failure. This feature is enabled by default.  metadata-transfer  Automatically perform a metadata transfer when `emerge --sync` is run. In versions of portage >=2.1.5, this feature is disabled by default. When metadata-transfer is disabled, metadata cache from the ${repository_location}/metadata/md5-cache/ directory will be used directly (if available).  mirror  Fetch everything in SRC_URI regardless of USE settings, except do not fetch anything when mirror is in RESTRICT.  mount-sandbox  Isolate the ebuild phase functions from host mount namespace. This makes it possible for ebuild to alter mountpoints without affecting the host system. Supported only on Linux. Requires mount namespace support in kernel.  multilib-strict  Many Makefiles assume that their libraries should go to /usr/lib, or $(prefix)/lib. This assumption can cause a serious mess if /usr/lib isn't a symlink to /usr/lib64. To find the bad packages, we have a portage feature called multilib-strict. It will prevent emerge from putting 64bit libraries into anything other than (/usr)/lib64.  network-sandbox  Isolate the ebuild phase functions from host network interfaces. Supported only on Linux. Requires network namespace support in kernel.  network-sandbox-proxy  Enable escaping network-sandbox through SOCKSv5 proxy. Enabling distcc feature also enables the proxy.   If asyncio Python module is available (requires Python 3.3, built-in since Python 3.4) Portage will additionally spawn an isolated SOCKSv5 proxy on UNIX socket. The socket address will be exported as PORTAGE_SOCKS5_PROXY and the processes running inside the sandbox can use it to access host's network when desired. Portage automatically configures new enough distcc to use the proxy.  news  Enable GLEP 42 news support. See https://www.gentoo.org/glep/glep-0042.html.  noauto  When utilizing ebuild(1), only run the function requested. Also, forces the corresponding ebuild and eclasses to be sourced again for each phase, in order to account for modifications.  noclean  Do not delete the source and temporary files after the merge process.  nodoc  Do not install doc files (/usr/share/doc).  noinfo  Do not install info pages.  noman  Do not install manpages.  nostrip  Prevents the stripping of binaries that are merged to the live filesystem.  notitles  Disables xterm titlebar updates (which contains status info).  parallel-fetch  Fetch in the background while compiling. Run `tail -f /var/log/emerge-fetch.log` in a terminal to view parallel-fetch progress.  parallel-install  Use finer-grained locks when installing packages, allowing for greater parallelization. For additional parallelization, disable ebuild-locks.  pid-sandbox  Isolate the process space for the ebuild processes. This makes it possible to cleanly kill all processes spawned by the ebuild. Supported only on Linux. Requires PID and mount namespace support in kernel. /proc is remounted inside the mount namespace to account for new PID namespace.  pkgdir-index-trusted  Trust that the PKGDIR index file is valid, meaning that no packages have been manually added or removed since the last call to emaint --fix binhost. This feature eliminates overhead involved with detection of packages that have been manually added or removed, which significantly improves performance in some cases, such as when PKGDIR resides on a high-latency network file system.  prelink-checksums  If prelink(8) is installed then use it to undo any prelinks on files before computing checksums for merge and unmerge. This feature is useful only if prelink(8) is installed and accurate checksums (despite prelinking) are needed for some reason such as for checking the integrity of installed files or because the unmerge-orphans feature is disabled.   Note that normal emerging of packages from source computes the checksums before things will be prelinked, so in such cases, this feature isn't required either. Undoing prelinking while merging is only required when using tools like quickpkg(1) which can cause already prelinked files to be merged.  preserve-libs  Preserve libraries when the sonames change during upgrade or downgrade. Libraries are preserved only if consumers of those libraries are detected. Preserved libraries are automatically removed when there are no remaining consumers. Run `emerge @preserved-rebuild` in order to rebuild all consumers of preserved libraries.  protect-owned  This is identical to the collision-protect feature except that files may be overwritten if they are not explicitly listed in the contents of a currently installed package. This is particularly useful on systems that have lots of orphan files that have been left behind by older versions of portage that did not support the unmerge-orphans feature. Like collision-protect, the COLLISION_IGNORE variable can be used to selectively disable this feature. It is recommended to leave either protect-owned or collision-protect enabled at all times, since otherwise file collisions between packages may result in files being overwritten or uninstalled at inappropriate times. If collision-protect is enabled then it takes precedence over protect-owned.  python-trace  Output a verbose trace of python execution to stderr when a command's --debug option is enabled.  qa-unresolved-soname-deps  Trigger a QA warning when a package installs files with unresolved soname dependencies.  sandbox  Enable sandbox-ing when running emerge(1) and ebuild(1).  sesandbox  Enable SELinux sandbox-ing. Do not toggle this FEATURE yourself.  sfperms  Stands for Smart Filesystem Permissions. Before merging packages to the live filesystem, automatically search for and set permissions on setuid and setgid files. Files that are setuid have the group and other read bits removed while files that are setgid have the other read bit removed. See also suidctl below.  sign  When commiting work to cvs with repoman(1), sign the Manifest with a GPG key. Read about the PORTAGE_GPG_KEY variable in make.conf(5).  skiprocheck  Skip write access checks on DISTDIR when fetching files. This is useful when FETCHCOMMAND and RESUMECOMMAND are used to forward fetch requests to a server that exposes DISTDIR as a read-only NFS share. A read-only DISTDIR is not compatible with the distlocks, so it is recommended to also add \"-distlocks\" to FEATURES in order to avoid warning messages that are triggered by this incompatibility.  split-elog  Store logs created by PORTAGE_ELOG_SYSTEM=\"save\" in category subdirectories of PORTAGE_LOGDIR/elog, instead of using PORTAGE_LOGDIR/elog directly.  split-log  Store build logs in category subdirectories of PORTAGE_LOGDIR/build, instead of using PORTAGE_LOGDIR directly.  splitdebug  Prior to stripping ELF etdyn and etexec files, the debugging info is stored for later use by various debuggers. This feature is disabled by nostrip. You should also consider setting compressdebug so the files don't suck up a lot of space. For installation of source code, see installsources.  strict  Have portage react strongly to conditions that have the potential to be dangerous (like missing or incorrect digests for ebuilds).  strict-keepdir  Have portage strictly require keepdir calls in ebuilds. Empty directories installed without explicit keepdir will be removed. This feature is automatically enabled for EAPI 8 and later.  stricter  Have portage react strongly to conditions that may conflict with system security provisions (for example textrels, executable stack). Read about the QA_STRICT_* variables in make.conf(5).  suidctl  Before merging packages to the live filesystem, automatically strip setuid bits from any file that is not listed in /etc/portage/suidctl.conf.  test  Run package-specific tests during each merge to help make sure the package compiled properly. See test in ebuild(1) and src_test() in ebuild(5). This feature implies the \"test\" USE flag if it is a member of IUSE, either explicitly or implicitly (see ebuild(5) for more information about IUSE). The \"test\" USE flag is also automatically disabled when the \"test\" feature is disabled.  test-fail-continue  If \"test\" is enabled FEATURES and the test phase of an ebuild fails, continue to execute the remaining phases as if the failure had not occurred. Note that the test phase for a specific package may be disabled by masking the \"test\" USE flag in package.use.mask (see portage(5)).  unknown-features-filter  Filter out any unknown values that the FEATURES variable contains.  unknown-features-warn  Warn if FEATURES contains one or more unknown values.  unmerge-backup  Call quickpkg(1) to create a backup of each package before it is unmerged (if a binary package of the same version does not already exist). Also see the related downgrade-backup feature.  unmerge-logs  Keep logs from successful unmerge phases. This is relevant only when PORTAGE_LOGDIR is set.  unmerge-orphans  If a file is not claimed by another package in the same slot and it is not protected by CONFIG_PROTECT, unmerge it even if the modification time or checksum differs from the file that was originally installed.  userfetch  When portage is run as root, drop privileges to portage:portage during the fetching of package sources.  userpriv  Allow portage to drop root privileges and compile packages as portage:portage without a sandbox (unless usersandbox is also used).  usersandbox  Enable the sandbox in the compile phase, when running without root privs (userpriv).  usersync  Drop privileges to the owner of ${repository_location} for emerge(1) --sync operations. Note that this feature assumes that all subdirectories of ${repository_location} have the same ownership as ${repository_location} itself. It is the user's responsibility to ensure correct ownership, since otherwise Portage would have to waste time validating ownership for each and every sync operation.  warn-on-large-env  Warn if portage is about to execute a child process with a large environment.  webrsync-gpg  Enable GPG verification when using emerge-webrsync. This feature is deprecated and has been replaced by the repos.conf sync-webrsync-verify-signature setting, see portage(5).  xattr  Preserve extended attributes (filesystem-stored metadata) when installing files (see attr(1)). The PORTAGE_XATTR_EXCLUDE variable may be used to exclude specific attributes from being preserved.", "make.conf"], "assume-digests": ["assume-digests\nWhen commiting work to cvs with repoman(1), assume that all existing SRC_URI digests are correct. This feature also affects digest generation via ebuild(1) and emerge(1) (emerge generates digests only when the digest feature is enabled). Existing digests for files that do not exist in ${DISTDIR} will be automatically assumed even when assume-digests is not enabled. If a file exists in ${DISTDIR} but its size does not match the existing digest, the digest will be regenerated regardless of whether or not assume-digests is enabled. The ebuild(1) digest command has a --force option that can be used to force regeneration of digests.", "make.conf"], "binpkg-docompress": ["binpkg-docompress\nPerform docompress (controllable file compression) before creating binary package. When this option is enabled (the default), documentation files are already compressed inside binary packages. When it is disabled, binary packages contain uncompressed documentation and Portage compresses it before installing.", "make.conf"], "binpkg-dostrip": ["binpkg-dostrip\nPerform file stripping before creating binary package. When this option is enabled (the default), executables are already stripped inside binary packages. When it is disabled, binary packages contain unstripped executables and Portage strips (or splits) them before installing.", "make.conf"], "binpkg-ignore-signature": ["binpkg-ignore-signature\nThis will disable GPG signature check for all binary packages. Enable this could be dangerous if you get binary packages from remote site or use third party packages.", "make.conf"], "binpkg-logs": ["binpkg-logs\nKeep logs from successful binary package merges. This is relevant only when PORTAGE_LOGDIR is set.", "make.conf"], "binpkg-multi-instance": ["binpkg-multi-instance\nEnable support for multiple binary package instances per ebuild. Having multiple instances is useful for a number of purposes, such as retaining builds that were built with different USE flags or linked against different versions of libraries. The location of any particular package within PKGDIR can be expressed as follows:", "make.conf"], "binpkg-request-signature": ["binpkg-request-signature\nBinary packages are requested to be signed by trusted GPG signature. Portage will reject to process any binary package without a valid GPG signature. The verify command is defined in BINPKG_GPG_VERIFY_COMMAND variable.", "make.conf"], "binpkg-signing": ["binpkg-signing\nBinary packages will be signed by given GPG command. The signing command is defined in BINPKG_GPG_SIGNING_COMMAND variable.", "make.conf"], "buildpkg": ["buildpkg\nBinary packages will be created for all packages that are merged. Also see quickpkg(1) and emerge(1) --buildpkg and --buildpkgonly options.", "make.conf"], "buildpkg-live": ["buildpkg-live\nWhen this option is enabled (the default), buildpkg will exhibit the default behavior of building binary cache for all packages. When it is disabled, binary packages will not be created for live ebuilds.", "make.conf"], "buildsyspkg": ["buildsyspkg\nBuild binary packages for just packages in the system set.", "make.conf"], "candy": ["candy\nEnable a special progress indicator when emerge(1) is calculating dependencies.", "make.conf"], "case-insensitive-fs": ["case-insensitive-fs\nUse case-insensitive file name comparisions when merging and unmerging files. Most users should not enable this feature, since most filesystems are case-sensitive. You should only enable this feature if you are using portage to install files to a case-insensitive filesystem.", "make.conf"], "ccache": ["ccache\nEnable portage support for the ccache package. If the ccache dir is not present in the user's environment, then portage will default to ${PORTAGE_TMPDIR}/ccache.", "make.conf"], "cgroup": ["cgroup\nUse Linux control group to control processes spawned by ebuilds. This allows emerge to safely kill all subprocesses when ebuild phase exits.", "make.conf"], "clean-logs": ["clean-logs\nEnable automatic execution of the command specified by the PORTAGE_LOGDIR_CLEAN variable. The default PORTAGE_LOGDIR_CLEAN setting will remove all files from PORTAGE_LOGDIR that were last modified at least 7 days ago.", "make.conf"], "collision-protect": ["collision-protect\nA QA-feature to ensure that a package doesn't overwrite files it doesn't own. The COLLISION_IGNORE variable can be used to selectively disable this feature. Also see the related protect-owned feature.", "make.conf"], "compress-build-logs": ["compress-build-logs\nThe causes all build logs to be compressed while they are being written. Log file names have an extension that is appropriate for the compression type. Currently, only gzip(1) compression is supported, so build logs will have a '.gz' extension when this feature is enabled.", "make.conf"], "compress-index": ["compress-index\nIf set then a compressed copy of 'Packages' index file will be written. This feature is intended for Gentoo binhosts using certain webservers (such as, but not limited to, Nginx with gzip_static module) to avoid redundant on-the-fly compression. The resulting file will be called 'Packages.gz' and its modification time will match that of 'Packages'.", "make.conf"], "compressdebug": ["compressdebug\nCompress the debug sections in the split debug files with zlib to save space. See splitdebug for general split debug information (upon which this feature depends).", "make.conf"], "config-protect-if-modified": ["config-protect-if-modified\nThis causes the CONFIG_PROTECT behavior to be skipped for files that have not been modified since they were installed. This feature is enabled by default.", "make.conf"], "digest": ["digest\nAutogenerate digests for packages when running the emerge(1) or ebuild(1) commands. If the assume-digests feature is also enabled then existing SRC_URI digests will be reused whenever they are available.", "make.conf"], "distcc": ["distcc\nEnable portage support for the distcc package.", "make.conf"], "distlocks": ["distlocks\nPortage uses lockfiles to ensure competing instances don't clobber each other's files. It covers saving distfiles to ${DISTDIR} and binpkgs to ${PKGDIR}.", "make.conf"], "downgrade-backup": ["downgrade-backup\nWhen a package is downgraded to a lower version, call quickpkg(1) in order to create a backup of the installed version before it is unmerged (if a binary package of the same version does not already exist). Also see the related unmerge-backup feature.", "make.conf"], "ebuild-locks": ["ebuild-locks\nUse locks to ensure that unsandboxed ebuild phases never execute concurrently. Also see parallel-install.", "make.conf"], "fail-clean": ["fail-clean\nClean up temporary files after a build failure. This is particularly useful if you have PORTAGE_TMPDIR on tmpfs. If this feature is enabled, you probably also want to enable PORTAGE_LOGDIR in order to save the build log. Both the ebuild(1) command and the noclean feature cause the fail-clean feature to be automatically disabled.", "make.conf"], "fakeroot": ["fakeroot\nEnable fakeroot for the install and package phases when a non-root user runs the ebuild(1) command.", "make.conf"], "fixlafiles": ["fixlafiles\nModifies .la files to not include other .la files and some other fixes (order of flags, duplicated entries, ...)", "make.conf"], "force-mirror": ["force-mirror\nOnly fetch files from configured mirrors, ignoring SRC_URI, except when mirror is in the ebuild(5) RESTRICT variable.", "make.conf"], "getbinpkg": ["getbinpkg\nForce emerges to always try to fetch files from the PORTAGE_BINHOST. See make.conf(5) for more information.", "make.conf"], "gpg-keepalive": ["gpg-keepalive\nRun GPG unlock command every 5 mins to avoid the passphrase expired. If your GPG is auto unlocked on login, you do not need this.", "make.conf"], "icecream": ["icecream\nEnable portage support for the icecream package.", "make.conf"], "installsources": ["installsources\nInstall source code into /usr/src/debug/${CATEGORY}/${PF} (also see splitdebug). This feature works only if debugedit is installed, CFLAGS is set to include debug information (such as with the -ggdb flag) and binpkg-dostrip is enabled.", "make.conf"], "ipc-sandbox": ["ipc-sandbox\nIsolate the ebuild phase functions from host IPC namespace. Supported only on Linux. Requires IPC namespace support in kernel.", "make.conf"], "keeptemp": ["keeptemp\nDo not delete the ${T} directory after the merge process.", "make.conf"], "keepwork": ["keepwork\nDo not delete the ${WORKDIR} directory after the merge process. ${WORKDIR} can then be reused since this feature disables most of the clean phase that runs prior to each build. Due to lack of proper cleanup, this feature can interfere with normal emerge operation and therefore it should not be left enabled for more than a short period of time.", "make.conf"], "lmirror": ["lmirror\nWhen mirror is enabled in FEATURES, fetch files even when mirror is also in the ebuild(5) RESTRICT variable. Do NOT use lmirror for clients that need to override RESTRICT when fetching from a local mirror, but instead use a \"local\" mirror setting in /etc/portage/mirrors, as described in portage(5).", "make.conf"], "merge-sync": ["merge-sync\nAfter a package is merged or unmerged, sync relevant files to disk in order to avoid data-loss in the event of a power failure. This feature is enabled by default.", "make.conf"], "metadata-transfer": ["metadata-transfer\nAutomatically perform a metadata transfer when `emerge --sync` is run. In versions of portage >=2.1.5, this feature is disabled by default. When metadata-transfer is disabled, metadata cache from the ${repository_location}/metadata/md5-cache/ directory will be used directly (if available).", "make.conf"], "mirror": ["mirror\nFetch everything in SRC_URI regardless of USE settings, except do not fetch anything when mirror is in RESTRICT.", "make.conf"], "mount-sandbox": ["mount-sandbox\nIsolate the ebuild phase functions from host mount namespace. This makes it possible for ebuild to alter mountpoints without affecting the host system. Supported only on Linux. Requires mount namespace support in kernel.", "make.conf"], "multilib-strict": ["multilib-strict\nMany Makefiles assume that their libraries should go to /usr/lib, or $(prefix)/lib. This assumption can cause a serious mess if /usr/lib isn't a symlink to /usr/lib64. To find the bad packages, we have a portage feature called multilib-strict. It will prevent emerge from putting 64bit libraries into anything other than (/usr)/lib64.", "make.conf"], "network-sandbox": ["network-sandbox\nIsolate the ebuild phase functions from host network interfaces. Supported only on Linux. Requires network namespace support in kernel.", "make.conf"], "network-sandbox-proxy": ["network-sandbox-proxy\nEnable escaping network-sandbox through SOCKSv5 proxy. Enabling distcc feature also enables the proxy.", "make.conf"], "news": ["news\nEnable GLEP 42 news support. See https://www.gentoo.org/glep/glep-0042.html.", "make.conf"], "noauto": ["noauto\nWhen utilizing ebuild(1), only run the function requested. Also, forces the corresponding ebuild and eclasses to be sourced again for each phase, in order to account for modifications.", "make.conf"], "noclean": ["noclean\nDo not delete the source and temporary files after the merge process.", "make.conf"], "nodoc": ["nodoc\nDo not install doc files (/usr/share/doc).", "make.conf"], "noinfo": ["noinfo\nDo not install info pages.", "make.conf"], "noman": ["noman\nDo not install manpages.", "make.conf"], "nostrip": ["nostrip\nPrevents the stripping of binaries that are merged to the live filesystem.", "make.conf"], "notitles": ["notitles\nDisables xterm titlebar updates (which contains status info).", "make.conf"], "parallel-fetch": ["parallel-fetch\nFetch in the background while compiling. Run `tail -f /var/log/emerge-fetch.log` in a terminal to view parallel-fetch progress.", "make.conf"], "parallel-install": ["parallel-install\nUse finer-grained locks when installing packages, allowing for greater parallelization. For additional parallelization, disable ebuild-locks.", "make.conf"], "pid-sandbox": ["pid-sandbox\nIsolate the process space for the ebuild processes. This makes it possible to cleanly kill all processes spawned by the ebuild. Supported only on Linux. Requires PID and mount namespace support in kernel. /proc is remounted inside the mount namespace to account for new PID namespace.", "make.conf"], "pkgdir-index-trusted": ["pkgdir-index-trusted\nTrust that the PKGDIR index file is valid, meaning that no packages have been manually added or removed since the last call to emaint --fix binhost. This feature eliminates overhead involved with detection of packages that have been manually added or removed, which significantly improves performance in some cases, such as when PKGDIR resides on a high-latency network file system.", "make.conf"], "prelink-checksums": ["prelink-checksums\nIf prelink(8) is installed then use it to undo any prelinks on files before computing checksums for merge and unmerge. This feature is useful only if prelink(8) is installed and accurate checksums (despite prelinking) are needed for some reason such as for checking the integrity of installed files or because the unmerge-orphans feature is disabled.", "make.conf"], "preserve-libs": ["preserve-libs\nPreserve libraries when the sonames change during upgrade or downgrade. Libraries are preserved only if consumers of those libraries are detected. Preserved libraries are automatically removed when there are no remaining consumers. Run `emerge @preserved-rebuild` in order to rebuild all consumers of preserved libraries.", "make.conf"], "protect-owned": ["protect-owned\nThis is identical to the collision-protect feature except that files may be overwritten if they are not explicitly listed in the contents of a currently installed package. This is particularly useful on systems that have lots of orphan files that have been left behind by older versions of portage that did not support the unmerge-orphans feature. Like collision-protect, the COLLISION_IGNORE variable can be used to selectively disable this feature. It is recommended to leave either protect-owned or collision-protect enabled at all times, since otherwise file collisions between packages may result in files being overwritten or uninstalled at inappropriate times. If collision-protect is enabled then it takes precedence over protect-owned.", "make.conf"], "python-trace": ["python-trace\nOutput a verbose trace of python execution to stderr when a command's --debug option is enabled.", "make.conf"], "qa-unresolved-soname-deps": ["qa-unresolved-soname-deps\nTrigger a QA warning when a package installs files with unresolved soname dependencies.", "make.conf"], "sandbox": ["sandbox\nEnable sandbox-ing when running emerge(1) and ebuild(1).", "make.conf"], "sesandbox": ["sesandbox\nEnable SELinux sandbox-ing. Do not toggle this FEATURE yourself.", "make.conf"], "sfperms": ["sfperms\nStands for Smart Filesystem Permissions. Before merging packages to the live filesystem, automatically search for and set permissions on setuid and setgid files. Files that are setuid have the group and other read bits removed while files that are setgid have the other read bit removed. See also suidctl below.", "make.conf"], "sign": ["sign\nWhen commiting work to cvs with repoman(1), sign the Manifest with a GPG key. Read about the PORTAGE_GPG_KEY variable in make.conf(5).", "make.conf"], "skiprocheck": ["skiprocheck\nSkip write access checks on DISTDIR when fetching files. This is useful when FETCHCOMMAND and RESUMECOMMAND are used to forward fetch requests to a server that exposes DISTDIR as a read-only NFS share. A read-only DISTDIR is not compatible with the distlocks, so it is recommended to also add \"-distlocks\" to FEATURES in order to avoid warning messages that are triggered by this incompatibility.", "make.conf"], "split-elog": ["split-elog\nStore logs created by PORTAGE_ELOG_SYSTEM=\"save\" in category subdirectories of PORTAGE_LOGDIR/elog, instead of using PORTAGE_LOGDIR/elog directly.", "make.conf"], "split-log": ["split-log\nStore build logs in category subdirectories of PORTAGE_LOGDIR/build, instead of using PORTAGE_LOGDIR directly.", "make.conf"], "splitdebug": ["splitdebug\nPrior to stripping ELF etdyn and etexec files, the debugging info is stored for later use by various debuggers. This feature is disabled by nostrip. You should also consider setting compressdebug so the files don't suck up a lot of space. For installation of source code, see installsources.", "make.conf"], "strict": ["strict\nHave portage react strongly to conditions that have the potential to be dangerous (like missing or incorrect digests for ebuilds).", "make.conf"], "strict-keepdir": ["strict-keepdir\nHave portage strictly require keepdir calls in ebuilds. Empty directories installed without explicit keepdir will be removed. This feature is automatically enabled for EAPI 8 and later.", "make.conf"], "stricter": ["stricter\nHave portage react strongly to conditions that may conflict with system security provisions (for example textrels, executable stack). Read about the QA_STRICT_* variables in make.conf(5).", "make.conf"], "suidctl": ["suidctl\nBefore merging packages to the live filesystem, automatically strip setuid bits from any file that is not listed in /etc/portage/suidctl.conf.", "make.conf"], "test": ["test\nRun package-specific tests during each merge to help make sure the package compiled properly. See test in ebuild(1) and src_test() in ebuild(5). This feature implies the \"test\" USE flag if it is a member of IUSE, either explicitly or implicitly (see ebuild(5) for more information about IUSE). The \"test\" USE flag is also automatically disabled when the \"test\" feature is disabled.", "make.conf"], "test-fail-continue": ["test-fail-continue\nIf \"test\" is enabled FEATURES and the test phase of an ebuild fails, continue to execute the remaining phases as if the failure had not occurred. Note that the test phase for a specific package may be disabled by masking the \"test\" USE flag in package.use.mask (see portage(5)).", "make.conf"], "unknown-features-filter": ["unknown-features-filter\nFilter out any unknown values that the FEATURES variable contains.", "make.conf"], "unknown-features-warn": ["unknown-features-warn\nWarn if FEATURES contains one or more unknown values.", "make.conf"], "unmerge-backup": ["unmerge-backup\nCall quickpkg(1) to create a backup of each package before it is unmerged (if a binary package of the same version does not already exist). Also see the related downgrade-backup feature.", "make.conf"], "unmerge-logs": ["unmerge-logs\nKeep logs from successful unmerge phases. This is relevant only when PORTAGE_LOGDIR is set.", "make.conf"], "unmerge-orphans": ["unmerge-orphans\nIf a file is not claimed by another package in the same slot and it is not protected by CONFIG_PROTECT, unmerge it even if the modification time or checksum differs from the file that was originally installed.", "make.conf"], "userfetch": ["userfetch\nWhen portage is run as root, drop privileges to portage:portage during the fetching of package sources.", "make.conf"], "userpriv": ["userpriv\nAllow portage to drop root privileges and compile packages as portage:portage without a sandbox (unless usersandbox is also used).", "make.conf"], "usersandbox": ["usersandbox\nEnable the sandbox in the compile phase, when running without root privs (userpriv).", "make.conf"], "usersync": ["usersync\nDrop privileges to the owner of ${repository_location} for emerge(1) --sync operations. Note that this feature assumes that all subdirectories of ${repository_location} have the same ownership as ${repository_location} itself. It is the user's responsibility to ensure correct ownership, since otherwise Portage would have to waste time validating ownership for each and every sync operation.", "make.conf"], "warn-on-large-env": ["warn-on-large-env\nWarn if portage is about to execute a child process with a large environment.", "make.conf"], "webrsync-gpg": ["webrsync-gpg\nEnable GPG verification when using emerge-webrsync. This feature is deprecated and has been replaced by the repos.conf sync-webrsync-verify-signature setting, see portage(5).", "make.conf"], "xattr": ["xattr\nPreserve extended attributes (filesystem-stored metadata) when installing files (see attr(1)). The PORTAGE_XATTR_EXCLUDE variable may be used to exclude specific attributes from being preserved.", "make.conf"], "FETCHCOMMAND": ["FETCHCOMMAND\nThis variable contains the command used for fetching package sources from the internet. It must contain the full path to the executable as well as the place-holders \\${DISTDIR}, \\${FILE} and \\${URI}. The command should be written to place the fetched file at \\${DISTDIR}/\\${FILE}. Also see RESUMECOMMAND.  Optional FETCHCOMMAND Placeholders       Placeholder Meaning Example        \\${DIGESTS} Space separated list of file digests blake2b:<hexdigest> sha512:<hexdigest>", "make.conf"], "Optional FETCHCOMMAND Placeholders": ["Optional FETCHCOMMAND Placeholders\n", "make.conf"], "FFLAGS FCFLAGS": ["FFLAGS FCFLAGS\nUse these variables to set the desired optimization/CPU instruction settings for applications that you compile with a FORTRAN compiler. FFLAGS is usually passed to the FORTRAN 77 compiler, and FCFLAGS to any FORTRAN compiler in more modern build systems.", "make.conf"], "GENTOO_MIRRORS": ["GENTOO_MIRRORS = [URIs]\nInsert your space-separated list of local mirrors here. These locations are used to download files before the ones listed in the ebuild scripts. Merging 'mirrorselect' can help. Entries in this variable that have no protocol and simply start with a '/' path separator may be used to specify mounted filesystem mirrors.", "make.conf"], "GPG_VERIFY_GROUP_DROP": ["GPG_VERIFY_GROUP_DROP = [group]\nThe group name used to drop root privileges during verification. Defaults to \"nogroup\"", "make.conf"], "GPG_VERIFY_USER_DROP": ["GPG_VERIFY_USER_DROP = [user]\nThe user name used to drop root privileges during verification. Defaults to \"nobody\"", "make.conf"], "http_proxy ftp_proxy RSYNC_PROXY": ["http_proxy ftp_proxy RSYNC_PROXY =\n[protocol://host:port]\nThese variables are used by network clients such as wget(1) and rsync(1). They are only required if you use a proxy server for internet access.", "make.conf"], "INSTALL_MASK": ["INSTALL_MASK = [space delimited list of\nfilename patterns (globs)]\nUse this variable if you want to selectively prevent certain files from being copied into your file system tree. This does not work on symlinks, but only on actual files (including directories). Useful if you wish to filter out files like HACKING.gz and TODO.gz.", "make.conf"], "LDFLAGS": ["LDFLAGS\nA list of flags to pass to the compiler when the linker will be called. See ld(1) for linker flags, but don't forget that these flags will be passed directly to the compiler. Thus, you must use '-Wl' to escape the flags which only the linker understands (see gcc(1)).", "make.conf"], "MAKEOPTS": ["MAKEOPTS\nUse this variable if you want to use parallel make. For example, if you have a dual-processor system, set this variable to \"-j2\" or \"-j3\" for enhanced build performance with many packages. Suggested settings are between CPUs+1 and 2*CPUs+1. In order to avoid excess load, the --load-average option is recommended. For more information, see make(1). Also see emerge(1) for information about analogous --jobs and --load-average options. Defaults to the number of processors if left unset.", "make.conf"], "NO_COLOR": ["NO_COLOR = [any string]\nSet to any nonempty string (e.g. \"1\") to disable color by default. Defaults to unset.", "make.conf"], "NOCOLOR": ["NOCOLOR = [\"true\" | \"false\"]\nDefines if color should be disabled by default. Deprecated in favor of NO_COLOR. Defaults to false.", "make.conf"], "PKGDIR": ["PKGDIR = [path]\nDefines the location where created .tbz2 or .gpkg binary packages will be stored when the emerge(1) --buildpkg option is enabled. By default, a given package is stored in a subdirectory corresponding to its category. However, for backward compatibility with the layout used by older versions of portage, if the ${PKGDIR}/All directory exists then all packages will be stored inside of it and symlinks to the packages will be created in the category subdirectories. Defaults to /var/cache/binpkgs.", "make.conf"], "PORT_LOGDIR": ["PORT_LOGDIR\nSee PORTAGE_LOGDIR below. Deprecated.", "make.conf"], "PORT_LOGDIR_CLEAN": ["PORT_LOGDIR_CLEAN\nSee PORTAGE_LOGDIR_CLEAN below. Deprecated.", "make.conf"], "PORTAGE_BINHOST": ["PORTAGE_BINHOST = [space delimited URI\nlist]\nThis is a list of hosts from which portage will grab prebuilt-binary packages. Each entry in the list must specify the full address of a directory serving tbz2/gpkgs for your system (this directory must contain a 'Packages' index file). This is only used when running with the get binary pkg options are given to emerge. Review emerge(1) for more information. The PORTAGE_BINHOST variable is deprecated in favor of the binrepos.conf configuration file (see portage(5)).", "make.conf"], "PORTAGE_BINHOST_HEADER_URI": ["PORTAGE_BINHOST_HEADER_URI =\n\"ftp://login:pass@grp.mirror.site/pub/grp/i686/athlon-xp/\"\nThis variable only makes sense on a system that will serve as a binhost and build packages for clients. It defines the URI header field for the package index file which is located at ${PKGDIR}/Packages. Clients that have PORTAGE_BINHOST properly configured will be able to fetch the index and use the URI header field as a base URI for fetching binary packages. If the URI header field is not defined then the client will use its ${PORTAGE_BINHOST} setting as the base URI.", "make.conf"], "PORTAGE_BINPKG_FORMAT": ["PORTAGE_BINPKG_FORMAT\nThis variable sets default format used for binary packages. Possible values are tar and rpm or both. It is very uncommon to set this and is likely not what you want. You probably want BINPKG_FORMAT instead.", "make.conf"], "PORTAGE_BINPKG_TAR_OPTS": ["PORTAGE_BINPKG_TAR_OPTS\nThis variable contains options to be passed to the tar command for creation of binary packages.", "make.conf"], "PORTAGE_BUNZIP2_COMMAND": ["PORTAGE_BUNZIP2_COMMAND = [bunzip2 command\nstring]\nThis variable should contain a command that is suitable for portage to call for bunzip2 extraction operations.", "make.conf"], "PORTAGE_BZIP2_COMMAND": ["PORTAGE_BZIP2_COMMAND = [bzip2 command\nstring]\nThis variable should contain a command that is suitable for portage to call for bzip2 compression operations. PORTAGE_BZIP2_COMMAND will also be called for extraction operation, with -d appended, unless the PORTAGE_BUNZIP2_COMMAND variable is set.", "make.conf"], "PORTAGE_CHECKSUM_FILTER": ["PORTAGE_CHECKSUM_FILTER = [space delimited list\nof hash names]\nThis variable may be used to filter the hash functions that are used to verify integrity of files. Hash function names are case-insensitive, and the * and -* wildcard tokens are supported. Defaults to the value of *. Examples:", "make.conf"], "PORTAGE_COMPRESS": ["PORTAGE_COMPRESS = \"bzip2\"\nThis variable contains the command used to compress documentation during the install phase.", "make.conf"], "PORTAGE_COMPRESS_EXCLUDE_SUFFIXES": ["PORTAGE_COMPRESS_EXCLUDE_SUFFIXES = \"gif\nhtm[l]? jp[e]?g pdf png\"\nThis variable contains a space delimited list of file suffixes for which matching files are excluded when the PORTAGE_COMPRESS command is called. Regular expressions are supported and the match is performed only against the portion of the file name which follows the last period character.", "make.conf"], "PORTAGE_COMPRESS_FLAGS": ["PORTAGE_COMPRESS_FLAGS = \"-9\"\nThis variable contains flags for the PORTAGE_COMPRESS command.", "make.conf"], "PORTAGE_ELOG_CLASSES": ["PORTAGE_ELOG_CLASSES\n", "make.conf"], "PORTAGE_ELOG_COMMAND": ["PORTAGE_ELOG_COMMAND\n", "make.conf"], "PORTAGE_ELOG_MAILFROM": ["PORTAGE_ELOG_MAILFROM\n", "make.conf"], "PORTAGE_ELOG_MAILSUBJECT": ["PORTAGE_ELOG_MAILSUBJECT\n", "make.conf"], "PORTAGE_ELOG_MAILURI": ["PORTAGE_ELOG_MAILURI\n", "make.conf"], "PORTAGE_ELOG_SYSTEM": ["PORTAGE_ELOG_SYSTEM\nPlease see /usr/share/portage/config/make.conf.example for elog documentation.", "make.conf"], "PORTAGE_FETCH_CHECKSUM_TRY_MIRRORS": ["PORTAGE_FETCH_CHECKSUM_TRY_MIRRORS =\n5\nNumber of mirrors to try when a downloaded file has an incorrect checksum.", "make.conf"], "PORTAGE_FETCH_RESUME_MIN_SIZE": ["PORTAGE_FETCH_RESUME_MIN_SIZE = 350K\nMinimum size of existing file for RESUMECOMMAND to be called. Files smaller than this size will be removed and FETCHCOMMAND will be called to download the file from the beginning. This is useful for helping to ensure that small garbage files such as html 404 pages are properly discarded. The variable should contain an integer number of bytes and may have a suffix such as K, M, or G.", "make.conf"], "PORTAGE_GPG_DIR": ["PORTAGE_GPG_DIR\nThe gpg(1) home directory that is used by repoman(1) when sign is in FEATURES. Defaults to $HOME/.gnupg.", "make.conf"], "PORTAGE_GPG_KEY": ["PORTAGE_GPG_KEY\nThe gpg(1) key used by repoman(1) to sign manifests when sign is in FEATURES. In order to sign commits with git(1), you will need Git >=1.7.9 and your commit key will have to be configured by `git config user.signingkey key_id`.", "make.conf"], "PORTAGE_GPG_SIGNING_COMMAND": ["PORTAGE_GPG_SIGNING_COMMAND\nThe command used by egencache(1) to sign manifests when sign is in FEATURES.", "make.conf"], "PORTAGE_GRPNAME": ["PORTAGE_GRPNAME = [group]\nDefines the groupname to use when executing in userpriv/etc... modes (i.e. non-root). Defaults to portage.", "make.conf"], "PORTAGE_INST_GID": ["PORTAGE_INST_GID = [gid]\nDefines the group id when installing files via dobin/dosbin. Useful when running ebuild as yourself. Defaults to 0.", "make.conf"], "PORTAGE_INST_UID": ["PORTAGE_INST_UID = [uid]\nDefines the user id when installing files via dobin/dosbin. Useful when running ebuild as yourself. Defaults to 0.", "make.conf"], "PORTAGE_IONICE_COMMAND": ["PORTAGE_IONICE_COMMAND = [ionice command\nstring]\nThis variable should contain a command for portage to call in order to adjust the io priority of portage and its subprocesses. The command string should contain a \\${PID} place-holder that will be substituted with an integer pid. For example, a value of \"ionice -c 3 -p \\${PID}\" will set idle io priority. For more information about ionice, see ionice(1). This variable is unset by default. Portage will also set the autogroup-nice value (see fBsched(7))), if FEATURES=\"pid-sandbox\" is enabled.", "make.conf"], "PORTAGE_SCHEDULING_POLICY": ["PORTAGE_SCHEDULING_POLICY = [policy name]\nAllows changing the\ncurrent scheduling policy. The supported options are other, batch, idle, fifo, round-robin and deadline. When unset, the scheduling policy remains unchanged, by default Linux uses 'other' policy. Users that wish to minimize the Portage's impact on system responsiveness should set scheduling policy to idle, which significantly reduces the disruption to the rest of the system by scheduling Portage as extremely low priority processes. see sched(7) for more information.", "make.conf"], "PORTAGE_SCHEDULING_PRIORITY": ["PORTAGE_SCHEDULING_PRIORITY =\n[priority]\nAllows changing the priority (1-99) of the current scheduling policy, only applies if PORTAGE _SCHEDULING_POLICY is set to 'fifo' or 'round-robin', for others the only supported priority is 0, If unset, defaults to lowest priority of the selected scheduling policy. For more information about scheduler, see sched(7). This variable is unset by default.", "make.conf"], "PORTAGE_LOG_FILTER_FILE_CMD": ["PORTAGE_LOG_FILTER_FILE_CMD\nThis variable specifies a command that filters build log output to a log file. In order to filter ANSI escape codes from build logs, ansifilter(1) is a convenient setting for this variable. Generally, PORTAGE_LOG_FILTER_FILE_CMD should include a supervisor that falls back to cat if the real filter command fails after exec. For example, a supervisor is needed for ansifilter, in case it fails after exec due to a problem resolving libstdc++ during a gcc upgrade. Example:", "make.conf"], "PORTAGE_LOGDIR": ["PORTAGE_LOGDIR\nThis variable defines the directory in which per-ebuild logs are kept. Logs are created only when this is set. They are stored as ${CATEGORY}:${PF}:YYYYMMDD-HHMMSS.log in the directory specified. If the directory does not exist, it will be created automatically and group permissions will be applied to it. If the directory already exists, portage will not modify its permissions.", "make.conf"], "PORTAGE_LOGDIR_CLEAN": ["PORTAGE_LOGDIR_CLEAN\nThis variable should contain a command for portage to call in order to clean PORTAGE_LOGDIR. The command string should contain a \\${PORTAGE_LOGDIR} place-holder that will be substituted with the value of that variable. This variable will have no effect unless clean-logs is enabled in FEATURES.", "make.conf"], "PORTAGE_NICENESS": ["PORTAGE_NICENESS = [number]\nThe value of this variable will be added to the current nice level that emerge is running at. In other words, this will not set the nice level, it will increment it. For more information about nice levels and what are acceptable ranges, see nice(1).", "make.conf"], "PORTAGE_RO_DISTDIRS": ["PORTAGE_RO_DISTDIRS = [space delimited list of\ndirectories]\nWhen a given file does not exist in DISTDIR, search for the file in this list of directories. Search order is from left to right. Note that the current implementation works by creating a symlink inside DISTDIR, but that may change in the future.", "make.conf"], "PORTAGE_RSYNC_EXTRA_OPTS": ["PORTAGE_RSYNC_EXTRA_OPTS = [rsync options\nstring]\nAdditional rsync options to be used by emerge --sync. Defaults to no value.", "make.conf"], "PORTAGE_RSYNC_INITIAL_TIMEOUT": ["PORTAGE_RSYNC_INITIAL_TIMEOUT =\ninteger\nUsed by emerge --sync as a timeout for the initial connection to an rsync server. Defaults to 15 seconds.", "make.conf"], "PORTAGE_RSYNC_OPTS": ["PORTAGE_RSYNC_OPTS = [rsync options\nstring]\nDefault rsync options to be used by emerge --sync. Don't change this unless you know exactly what you're doing! Defaults to \"--recursive --links --safe-links --perms --times --compress --force --whole-file --delete --stats --timeout=180 --exclude='/distfiles' --exclude='/local' --exclude='/packages'\"", "make.conf"], "PORTAGE_RSYNC_RETRIES": ["PORTAGE_RSYNC_RETRIES = [NUMBER]\nThe number of times rsync should retry on failed connections before giving up. If set to a negative number, then retry until all possible addresses are exhausted. Defaults to -1.", "make.conf"], "PORTAGE_SSH_OPTS": ["PORTAGE_SSH_OPTS = [list of ssh\noptions]\nAdditional ssh options to be used when portage executes ssh or sftp. This variable supports use of embedded quote characters to quote whitespace or special shell characters within arguments (embedded quotes must be escaped in make.conf settings). Defaults to no value.", "make.conf"], "PORTAGE_SYNC_STALE": ["PORTAGE_SYNC_STALE = [NUMBER]\nDefines the number of days after the last `emerge --sync` that a warning message should be produced. A value of 0 will disable warnings. Defaults to 30.", "make.conf"], "PORTAGE_TMPDIR": ["PORTAGE_TMPDIR = [path]\nDefines the location of the temporary build directories. Defaults to /var/tmp.", "make.conf"], "PORTAGE_USERNAME": ["PORTAGE_USERNAME = [user]\nDefines the username to use when executing in userpriv/etc... modes (i.e. non-root). Defaults to portage.", "make.conf"], "PORTAGE_WORKDIR_MODE": ["PORTAGE_WORKDIR_MODE = \"0700\"\nThis variable controls permissions for WORKDIR (see ebuild(5)).", "make.conf"], "PORTAGE_XATTR_EXCLUDE": ["PORTAGE_XATTR_EXCLUDE = [space delimited list\nof fnmatch patterns]\nThis variable may be used to exclude specific attributes from being preserved when xattr is in FEATURES. Defaults to \"security.*\" (security labels are special, see bug #461868).", "make.conf"], "PORTDIR": ["PORTDIR = [path]\nDefines the location of main repository. This variable is deprecated in favor of settings in repos.conf. If you change this, you must update your /etc/portage/make.profile symlink accordingly. Defaults to /var/db/repos/gentoo. ***Warning*** Data stored inside PORTDIR is in peril of being overwritten or deleted by the emerge --sync command. The default value of PORTAGE_RSYNC_OPTS will protect the default locations of DISTDIR and PKGDIR, but users are warned that any other locations inside PORTDIR are not necessarily safe for data storage. You should not put other data (such as overlays) in your PORTDIR. Portage will walk directory structures and may arbitrarily add invalid categories as packages.", "make.conf"], "PORTDIR_OVERLAY": ["PORTDIR_OVERLAY = \"[path] [different-path]\n[etc...]\"\nDefines the locations of other repositories. This variable is deprecated in favor of settings in repos.conf. This variable is a space-delimited list of directories. Defaults to no value.", "make.conf"], "QA_STRICT_EXECSTACK = ": ["QA_STRICT_EXECSTACK = \"set\"\nSet this to cause portage to ignore any QA_EXECSTACK override settings from ebuilds. See also ebuild(5).", "make.conf"], "QA_STRICT_FLAGS_IGNORED = ": ["QA_STRICT_FLAGS_IGNORED = \"set\"\nSet this to cause portage to ignore any QA_FLAGS_IGNORED override settings from ebuilds. See also ebuild(5).", "make.conf"], "QA_STRICT_MULTILIB_PATHS = ": ["QA_STRICT_MULTILIB_PATHS = \"set\"\nSet this to cause portage to ignore any QA_MULTILIB_PATHS override settings from ebuilds. See also ebuild(5).", "make.conf"], "QA_STRICT_PRESTRIPPED = ": ["QA_STRICT_PRESTRIPPED = \"set\"\nSet this to cause portage to ignore any QA_PRESTRIPPED override settings from ebuilds. See also ebuild(5).", "make.conf"], "QA_STRICT_TEXTRELS = ": ["QA_STRICT_TEXTRELS = \"set\"\nSet this to cause portage to ignore any QA_TEXTREL override settings from ebuilds. See also ebuild(5).", "make.conf"], "QA_STRICT_WX_LOAD = ": ["QA_STRICT_WX_LOAD = \"set\"\nSet this to cause portage to ignore any QA_WX_LOAD override settings from ebuilds. See also ebuild(5).", "make.conf"], "ALLOW_TEST": ["ALLOW_TEST = [token]...\nThis variable can be used to select the kinds of additional tests to run, particularly overriding RESTRICT=\"test\". It contains a whitespace-separated list of tokens. The following tokens are currently recognized:  all  Run tests in all packages, even if they specify RESTRICT=\"test\". This option is certain to cause test failures, it is intended to be used by developers when testing specific packages.  network  Run tests in packages specifying PROPERTIES=\"test_network\". Note that this will most likely cause Internet access during the test suite which could cause additional costs, privacy concerns and intermittent test failures.", "make.conf"], "all": ["all\nRun tests in all packages, even if they specify RESTRICT=\"test\". This option is certain to cause test failures, it is intended to be used by developers when testing specific packages.", "make.conf"], "network": ["network\nRun tests in packages specifying PROPERTIES=\"test_network\". Note that this will most likely cause Internet access during the test suite which could cause additional costs, privacy concerns and intermittent test failures.", "make.conf"], "RESUMECOMMAND": ["RESUMECOMMAND\nThis variable contains the command used for resuming package sources that have been partially downloaded. It should be defined using the same format as FETCHCOMMAND, and must include any additional option(s) that may be necessary in order to continue a partially downloaded file located at \\${DISTDIR}/\\${FILE}.", "make.conf"], "ROOT": ["ROOT = \"/\"\nPlease note an important recent change regarding the ROOT variable -- in EAPI 7 ebuilds, this variable will default to \"\" rather than the traditional \"/\" within ebuilds when pointing to the root filesystem, and when set to a non-root path this variable will never contain a trailing slash. This has the added convenience of eliminating the need to specify \"${ROOT%/}\" when concatenating paths, making the use of ROOT more elegant. This applies to the variables EROOT, D and ED as well. Please make note that this will mean that ebuilds must use different logic in conditionals to determine if they are installing to the root filesystem -- use [[ \"$ROOT\" == \"\" ]] instead of [[ \"$ROOT\" == \"/\" ]].", "ebuild"], "RPMDIR": ["RPMDIR = [path]\nDefines the location where created RPM packages will be stored. Defaults to /var/cache/rpm.", "make.conf"], "SYNC": ["SYNC = [RSYNC]\nInsert your preferred rsync mirror here. This rsync server is used to sync the local ebuild repository when `emerge --sync` is run.", "make.conf"], "Usage:": ["Usage:\n(rsync|ssh)://[username@]hostname[:port]/(module|path)", "make.conf"], "Examples:": ["Examples:\nrsync://private-mirror.com/portage-module rsync://rsync-user@private-mirror.com:873/gentoo-portage ssh://ssh-user@192.168.0.1:22/var/db/repos/gentoo ssh://ssh-user@192.168.0.1:22/\\${HOME}/portage-storage", "make.conf"], "UNINSTALL_IGNORE": ["UNINSTALL_IGNORE = [space delimited list of\nfnmatch patterns]\nThis variable prevents uninstallation of files that match specific fnmatch(3) patterns. In order to ignore file collisions with these files at install time, the same patterns can be added to the COLLISION_IGNORE variable. Defaults to \"/lib/modules/*\".", "make.conf"], "USE": ["USE = [space delimited list of USE\nitems]\nThis variable contains options that control the build behavior of several packages. More information in ebuild(5). Possible USE values can be found in /var/db/repos/gentoo/profiles/use.desc.", "make.conf"], "USE_ORDER": ["USE_ORDER =\n\"env:pkg:conf:defaults:pkginternal:features:repo:env.d\"\nDetermines the precedence of layers in the incremental stacking of the USE variable. Precedence decreases from left to right such that env overrides pkg, pkg overrides conf, and so forth.", "make.conf"], "env": ["env\nUSE from the current environment variables (USE and those listed in USE_EXPAND)", "make.conf"], "pkg": ["pkg\nPer-package USE from /etc/portage/package.use (see portage(5))", "make.conf"], "conf": ["conf\nUSE from make.conf", "make.conf"], "defaults": ["defaults\nUSE from make.defaults and package.use in the profile (e.g. /etc/portage/make.profile/package.use) (see portage(5))", "make.conf"], "pkginternal": ["pkginternal\nUSE from ebuild(5) IUSE defaults", "make.conf"], "features": ["features\nFlags implied by FEATURES. Currently includes USE=test for FEATURES=test.", "make.conf"], "repo": ["repo\nUSE from make.defaults and package.use in the repo's profiles/ top dir (e.g. /var/db/repos/gentoo/profiles/package.use) (see portage(5))", "make.conf"], "env.d": ["env.d\nUSE from the environment variables, such as LINGUAS, defined by files in /etc/env.d/", "make.conf"], "ARCH": ["ARCH\nThis variable contains the official Gentoo-specific acronym for the current architecture of the running system. For an authoritative list please review /var/db/repos/gentoo/profiles/arch.list.", "ebuild"], "P": ["P\nThis variable contains the package name without the ebuild revision. This variable must NEVER be modified.", "ebuild"], "PN": ["PN\nContains the name of the script without the version number.", "ebuild"], "PV": ["PV\nContains the version number without the revision.", "ebuild"], "PR": ["PR\nContains the revision number or 'r0' if no revision number exists.", "ebuild"], "PVR": ["PVR\nContains the version number with the revision (if any).", "ebuild"], "PF": ["PF\nContains the full package name PN-PVR", "ebuild"], "CATEGORY": ["CATEGORY\nContains the package category name.", "ebuild"], "A": ["A\nContains all source files required for the package. This variable must not be defined. It is autogenerated from the SRC_URI variable.", "ebuild"], "WORKDIR": ["WORKDIR =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/work\"\nContains the path to the package build root. Do not modify this variable.", "ebuild"], "FILESDIR": ["FILESDIR =\n\"${PORTAGE_TMPDIR}/${CATEGORY}/${PF}/files\"\nContains the path to the directory in which package-specific auxiliary files are located. Do not modify this variable.", "ebuild"], "EBUILD_PHASE": ["EBUILD_PHASE\nContains the abreviated name of the phase function that is currently executing, such as \"setup\", \"unpack\", \"compile\", or \"preinst\".", "ebuild"], "EBUILD_PHASE_FUNC": ["EBUILD_PHASE_FUNC\nBeginning with EAPI 5, contains the full name of the phase function that is currently executing, such as \"pkg_setup\", \"src_unpack\", \"src_compile\", or \"pkg_preinst\".", "ebuild"], "EPREFIX": ["EPREFIX\nBeginning with EAPI 3, contains the offset that this Portage was configured for during installation. The offset is sometimes necessary in an ebuild or eclass, and is available in such cases as ${EPREFIX}. EPREFIX does not contain a trailing slash, therefore an absent offset is represented by the empty string. Do not modify this variable.", "ebuild"], "S": ["S = \"${WORKDIR}/${P}\"\nContains the path to the temporary build directory. This variable is used by the functions src_compile and src_install. Both are executed with S as the current directory. This variable may be modified to match the extraction directory of a tarball for the package.", "ebuild"], "T": ["T =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/temp\"\nContains the path to a temporary directory. You may use this for whatever you like.", "ebuild"], "D": ["D =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/image/\"\nContains the path to the temporary install directory. Every write operation that does not involve the helper tools and functions (found below) should be prefixed with ${D}. Beginning with EAPI 3, the offset prefix often needs to be taken into account here, for which the variable ${ED} is provided (see below). Note that with EAPI 7, any trailing slash contained in this path will be automatically removed for ease of concatenating paths within ebuilds. Do not modify this variable.", "ebuild"], "ED": ["ED =\n\"${PORTAGE_TMPDIR}/portage/${CATEGORY}/${PF}/image/${EPREFIX}/\"\nBeginning with EAPI 3, contains the path \"${D%/}${EPREFIX}/\" for convenience purposes. For EAPI values prior to EAPI 3 which do not support ED, helpers use D where they would otherwise use ED. Note that with EAPI 7, any trailing slash contained in this path will be automatically removed for ease of concatenating paths within ebuilds. Do not modify this variable.", "ebuild"], "MERGE_TYPE": ["MERGE_TYPE\nBeginning with EAPI 4, the MERGE_TYPE variable can be used to query the current merge type. This variable will contain one of the following possible values:    Value Meaning   binary previously-built which is scheduled for merge   buildonly source-build which is not scheduled for merge   source source-build which is scheduled for merge", "ebuild"], "PROVIDES_EXCLUDE": ["PROVIDES_EXCLUDE = [space delimited list of fnmatch\npatterns]\nSonames and file paths matched by these fnmatch patterns will be excluded during genertion of PROVIDES metadata (see portage(5)). Patterns are delimited by whitespace, and it is possible to create patterns containing quoted whitespace.", "ebuild"], "PORTAGE_LOG_FILE": ["PORTAGE_LOG_FILE\nContains the path of the build log. If PORTAGE_LOGDIR variable is unset then PORTAGE_LOG_FILE=\"${T}/build.log\".", "ebuild"], "PORTAGE_SOCKS5_PROXY": ["PORTAGE_SOCKS5_PROXY\nContains the UNIX socket path to SOCKSv5 proxy providing host network access. Available only when running inside network-sandbox and a proxy is available (see network-sandbox in make.conf(5)).", "ebuild"], "REPLACED_BY_VERSION": ["REPLACED_BY_VERSION\nBeginning with EAPI 4, the REPLACED_BY_VERSION variable can be used in pkg_prerm and pkg_postrm to query the package version that is replacing the current package. If there is no replacement package, the variable will be empty, otherwise it will contain a single version number.", "ebuild"], "REPLACING_VERSIONS": ["REPLACING_VERSIONS\nBeginning with EAPI 4, the REPLACING_VERSIONS variable can be used in pkg_pretend, pkg_setup, pkg_preinst and pkg_postinst to query the package version(s) that the current package is replacing. If there are no packages to replace, the variable will be empty, otherwise it will contain a space-separated list of version numbers corresponding to the package version(s) being replaced. Typically, this variable will not contain more than one version, but according to PMS it can contain more.", "ebuild"], "REQUIRES_EXCLUDE": ["REQUIRES_EXCLUDE = [space delimited list of fnmatch\npatterns]\nSonames and file paths matched by these fnmatch patterns will be excluded during generation of REQUIRES metadata (see portage(5)). Patterns are delimited by whitespace, and it is possible to create patterns containing quoted whitespace.", "ebuild"], "EROOT": ["EROOT = \"${ROOT%/}${EPREFIX}/\"\nBeginning with EAPI 3, contains \"${ROOT%/}${EPREFIX}/\" for convenience purposes. Do not modify this variable. Also see the important note regarding ROOT with EAPI 7, above. As with ROOT, EROOT will be defined as \"\" when set to the root filesystem and never have a trailing slash within an ebuild.", "ebuild"], "BROOT": ["BROOT = \"${EPREFIX}\"\nBeginning with EAPI 7, the absolute path to the root directory containing build dependencies satisfied by BDEPEND, typically executable build tools. This includes any applicable offset prefix. Do not modify this variable.", "ebuild"], "DESCRIPTION": ["DESCRIPTION = \"A happy little\npackage\"\nShould contain a short description of the package.", "ebuild"], "EAPI": ["EAPI = \"0\"\nDefines the ebuild API version to which this package conforms. If not defined then it defaults to \"0\". If portage does not recognize the EAPI value then it will mask the package and refuse to perform any operations with it since this means that a newer version of portage needs to be installed first. For maximum backward compatiblity, a package should conform to the lowest possible EAPI. Note that anyone who uses the ebuild(1) command with this package will be required to have a version of portage that recognizes the EAPI to which this package conforms.", "ebuild"], "SRC_URI": ["SRC_URI =\n\"https://example.com/path/${P}.tar.gz\"\nContains a list of URIs for the required source files. It can contain multiple URIs for a single source file. The list is processed in order if the file was not found on any of the GENTOO_MIRRORS. Beginning with EAPI 2, the output file name of a given URI may be customized with a \"->\" operator on the right hand side, followed by the desired output file name. All tokens, including the operator and output file name, should be separated by whitespace.", "ebuild"], "HOMEPAGE": ["HOMEPAGE = \"https://example.com/\"\nShould contain a list of URIs for the sources main sites and other further package dependent information.", "ebuild"], "KEYWORDS": ["KEYWORDS =\n[-~][x86,ppc,sparc,mips,alpha,arm,hppa,...]\n", "ebuild"], "SLOT": ["SLOT\nThis sets the SLOT for packages that may need to have multiple versions co-exist. By default you should set SLOT=\"0\". If you are unsure, then do not fiddle with this until you seek some guidance from some guru. This value should NEVER be left undefined.", "ebuild"], "LICENSE": ["LICENSE\nThis should be a space delimited list of licenses that the package falls under. This _must_ be set to a matching license in /var/db/repos/gentoo/licenses/. If the license does not exist in the repository yet, you must add it first.", "ebuild"], "IUSE": ["IUSE\nThis should be a list of any and all USE flags that are leveraged within your build script. The only USE flags that should not be listed here are arch related flags (see KEYWORDS). Beginning with EAPI 1, it is possible to prefix flags with + or - in order to create default settings that respectively enable or disable the corresponding USE flags. For details about USE flag stacking order, refer to the USE_ORDER variable in make.conf(5). Given the default USE_ORDER setting, negative IUSE default settings are effective only for negation of repo-level USE settings, since profile and user configuration settings override them.", "ebuild"], "DEPEND": ["DEPEND\nThis should contain a list of all packages that are required for the program to compile (aka buildtime dependencies). These are usually libraries and headers.", "ebuild"], "RDEPEND": ["RDEPEND\nThis should contain a list of all packages that are required for this program to run (aka runtime dependencies). These are usually libraries.", "ebuild"], "BDEPEND": ["BDEPEND\nThis should contain a list of all packages that are required to be executable during compilation of this program (aka native build dependencies). These are usually tools, like interpreters or (cross-)compilers. They will be installed into the system performing the build.", "ebuild"], "IDEPEND": ["IDEPEND\nThis should contain a list of all packages that are required to be executable during merging of this package (aka native install-time dependencies). These are usually post-install tooling, like cache generators. They will be installed into the system performing the merge.", "ebuild"], "PDEPEND": ["PDEPEND\nThis should contain a list of all packages that should be merged after this one (aka post merge dependencies), but which may be installed by the package manager at any time, if that is not possible.", "ebuild"], "REQUIRED_USE": ["REQUIRED_USE\nBeginning with EAPI 4, the REQUIRED_USE variable can be used to specify combinations of USE flags that are allowed or not allowed. Elements can be nested when necessary.", "ebuild"], "RESTRICT": ["RESTRICT\nThis should be a space delimited list of portage features to restrict. You may use conditional syntax to vary restrictions as seen above in DEPEND.", "ebuild"], "PROPERTIES": ["PROPERTIES\nA space delimited list of properties, with conditional syntax support.", "ebuild"], "DOCS": ["DOCS\nBeginning with EAPI 4, an array or space-delimited list of documentation files for the default src_install function to install using dodoc. If undefined, a reasonable default list is used. See the documentation for src_install below.", "ebuild"], "PATCHES": ["PATCHES\nBeginning with EAPI 6, an array of patches for applying in the default src_prepare function using eapply.", "ebuild"], "Usage": ["Usage Notes\nSeveral QA variables are provided which allow an ebuild to manipulate some of the QA checks performed by portage. Use of these variables in ebuilds should be kept to an absolute minimum otherwise they defeat the purpose of the QA checks, and their use is subject to agreement of the QA team. They are primarily intended for use by ebuilds that install closed-source binary objects that cannot be altered.", "ebuild"], "QA_AM_MAINTAINER_MODE": ["QA_AM_MAINTAINER_MODE\nThis should contain a list of lines containing automake missing --run commands. The lines may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_CONFIG_IMPL_DECL_SKIP": ["QA_CONFIG_IMPL_DECL_SKIP\nThis should contain a list of function names to ignore when checking for -Wimplicit-function-declaration in configure logs. This should only be used for false positives.", "ebuild"], "QA_CONFIGURE_OPTIONS": ["QA_CONFIGURE_OPTIONS\nThis should contain a list of configure options which trigger warnings about unrecognized options. The options may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_DESKTOP_FILE": ["QA_DESKTOP_FILE\nThis should contain a list of file paths, relative to the image directory, of desktop files which should not be validated. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_DT_NEEDED": ["QA_DT_NEEDED\nThis should contain a list of file paths, relative to the image directory, of shared libraries that lack NEEDED entries. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_EXECSTACK": ["QA_EXECSTACK\nThis should contain a list of file paths, relative to the image directory, of objects that require executable stack in order to run. The paths may contain fnmatch patterns.", "ebuild"], "QA_FLAGS_IGNORED": ["QA_FLAGS_IGNORED\nThis should contain a list of file paths, relative to the image directory, of files that do not contain .GCC.command.line sections or contain .hash sections. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_MULTILIB_PATHS": ["QA_MULTILIB_PATHS\nThis should contain a list of file paths, relative to the image directory, of files that should be ignored for the multilib-strict checks. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_PKGCONFIG_VERSION": ["QA_PKGCONFIG_VERSION\nIf set, then portage verifies that all pkg-config .pc files have a Version field with the value of QA_PKGCONFIG_VERSION. For example, set QA_PKGCONFIG_VERSION=${PV} if your package is expected to install all pkg-config .pc files with a Version field containing PV.", "ebuild"], "QA_PREBUILT": ["QA_PREBUILT\nThis should contain a list of file paths, relative to the image directory, of files that are pre-built binaries. Paths listed here will be appended to each of the QA_* variables listed below. The paths may contain fnmatch-like patterns which will be internally translated to regular expressions for the QA_* variables that support regular expressions instead of fnmatch patterns. The translation mechanism simply replaces \"*\" with \".*\".", "ebuild"], "QA_PRESTRIPPED": ["QA_PRESTRIPPED\nThis should contain a list of file paths, relative to the image directory, of files that contain pre-stripped binaries. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_SONAME": ["QA_SONAME\nThis should contain a list of file paths, relative to the image directory, of shared libraries that lack SONAMEs. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_SONAME_NO_SYMLINK": ["QA_SONAME_NO_SYMLINK\nThis should contain a list of file paths, relative to the image directory, of shared libraries that have SONAMEs but should not have a corresponding SONAME symlink in the same directory. The paths may contain regular expressions with escape-quoted special characters.", "ebuild"], "QA_TEXTRELS": ["QA_TEXTRELS\nThis variable can be set to a list of file paths, relative to the image directory, of files that contain text relocations that cannot be eliminated. The paths may contain fnmatch patterns.", "ebuild"], "QA_WX_LOAD": ["QA_WX_LOAD\nThis should contain a list of file paths, relative to the image directory, of files that contain writable and executable segments. These are rare. The paths may contain fnmatch patterns.", "ebuild"], "inherit": ["inherit\nInherit is portage's maintenance of extra classes of functions that are external to ebuilds and provided as inheritable capabilities and data. They define functions and set data types as drop-in replacements, expanded, and simplified routines for extremely common tasks to streamline the build process. Call to inherit cannot depend on conditions which can vary in given ebuild. Specification of the eclasses contains only their name and not the .eclass extension. Also note that the inherit statement must come before other variable declarations unless these variables are used in global scope of eclasses.", "ebuild"], "pkg_pretend": ["pkg_pretend\nBeginning with EAPI 4, this function can be defined in order to check that miscellaneous requirements are met. It is called as early as possible, before any attempt is made to satisfy dependencies. If the function detects a problem then it should call eerror and die. The environment (variables, functions, temporary directories, etc..) that is used to execute pkg_pretend is not saved and therefore is not available in phases that execute afterwards.", "ebuild"], "pkg_nofetch": ["pkg_nofetch\nThis function will be executed when the files in SRC_URI cannot be fetched for any reason. If you turn on fetch in RESTRICT, this is useful for displaying information to the user on *how* to obtain said files. All you have to do is output a message and let the function return. Do not end the function with a call to die.", "ebuild"], "pkg_setup": ["pkg_setup\nThis function can be used if the package needs specific setup actions or checks to be preformed before anything else. Initial working directory: $PORTAGE_TMPDIR", "ebuild"], "src_unpack": ["src_unpack\nThis function is used to unpack all the sources in A to WORKDIR. If not defined in the ebuild script it calls unpack ${A}. Any patches and other pre configure/compile modifications should be done here. Initial working directory: $WORKDIR", "ebuild"], "src_prepare": ["src_prepare\nAll preparation of source code, such as application of patches, should be done here. This function is supported beginning with EAPI 2. Initial working directory: $S", "ebuild"], "src_configure": ["src_configure\nAll necessary steps for configuration should be done here. This function is supported beginning with EAPI 2. Initial working directory: $S", "ebuild"], "src_compile": ["src_compile\nWith less than EAPI 2, all necessary steps for both configuration and compilation should be done here. Beginning with EAPI 2, only compilation steps should be done here. Initial working directory: $S", "ebuild"], "src_test": ["src_test\nRun all package specific test cases. The default is to run 'emake check' followed 'emake test'. Prior to EAPI 5, the default src_test implementation will automatically pass the -j1 option as the last argument to emake, and beginning with EAPI 5 it will allow the tests to run in parallel. Initial working directory: $S", "ebuild"], "src_install": ["src_install\nShould contain everything required to install the package in the temporary install directory. Initial working directory: $S", "ebuild"], "pkg_preinst": ["pkg_preinst pkg_postinst\nAll modifications required on the live-filesystem before and after the package is merged should be placed here. Also commentary for the user should be listed here as it will be displayed last. Initial working directory: $PWD", "ebuild"], "pkg_prerm": ["pkg_prerm pkg_postrm\nLike the pkg_*inst functions but for unmerge. Initial working directory: $PWD", "ebuild"], "pkg_config": ["pkg_config\nThis function should contain optional basic configuration steps. Initial working directory: $PWD", "ebuild"], "default": ["default\nCalls the default phase function implementation for the currently executing phase. This function is supported beginning with EAPI 2.", "ebuild"], "default_*": ["default_*\nBeginning with EAPI 2, the default pkg_nofetch and src_* phase functions are accessible via a function having a name that begins with default_ and ends with the respective phase function name. For example, a call to a function with the name default_src_compile is equivalent to a call to the default src_compile implementation.    Default Phase Functions     default_src_unpack   default_src_prepare   default_src_configure   default_src_compile   default_src_test", "ebuild"], "assert": ["assert [reason]\nChecks the value of the shell's PIPESTATUS array variable, and if any component is non-zero (indicating failure), calls die with reason as a failure message.", "ebuild"], "die": ["die [reason]\nCauses the current emerge process to be aborted. The final display will include reason.", "ebuild"], "nonfatal": ["nonfatal <helper>\nExecute helper and do not call die if it fails. The nonfatal helper is available beginning with EAPI 4.", "ebuild"], "use": ["use <USE item>\nIf USE item is in the USE variable, the function will silently return 0 (aka shell true). If USE item is not in the USE variable, the function will silently return 1 (aka shell false). usev is a verbose version of use.  Example:    if use gnome ; then \tguiconf=\"--enable-gui=gnome --with-x\" elif use gtk ; then \tguiconf=\"--enable-gui=gtk --with-x\" elif use X ; then \tguiconf=\"--enable-gui=athena --with-x\" else \t# No gui version will be built \tguiconf=\"\" fi", "ebuild"], "usev": ["usev <USE item>\nLike use, but also echoes USE item when use returns true.", "ebuild"], "usex": ["usex <USE flag> [true output]\n[false output] [true suffix] [false\nsuffix]\nIf USE flag is set, echo [true output][true suffix] (defaults to \"yes\"), otherwise echo [false output][false suffix] (defaults to \"no\"). The usex helper is available beginning with EAPI 5.", "ebuild"], "use_with": ["use_with <USE item> [configure name]\n[configure opt]\nUseful for creating custom options to pass to a configure script. If USE item is in the USE variable and a configure opt is specified, then the string --with-[configure name]=[configure opt] will be echoed. If configure opt is not specified, then just --with-[configure name] will be echoed. If USE item is not in the USE variable, then the string --without-[configure name] will be echoed. If configure name is not specified, then USE item will be used in its place. Beginning with EAPI 4, an empty configure opt argument is recognized. In EAPI 3 and earlier, an empty configure opt argument is treated as if it weren't provided.  Examples:    USE=\"opengl\" myconf=$(use_with opengl) (myconf now has the value \"--with-opengl\")  USE=\"jpeg\" myconf=$(use_with jpeg libjpeg) (myconf now has the value \"--with-libjpeg\")  USE=\"\" myconf=$(use_with jpeg libjpeg) (myconf now has the value \"--without-libjpeg\")  USE=\"sdl\" myconf=$(use_with sdl SDL all-plugins) (myconf now has the value \"--with-SDL=all-plugins\")", "ebuild"], "use_enable": ["use_enable <USE item> [configure\nname] [configure opt]\nSame as use_with above, except that the configure options are --enable- instead of --with- and --disable- instead of --without-. Beginning with EAPI 4, an empty configure opt argument is recognized. In EAPI 3 and earlier, an empty configure opt argument is treated as if it weren't provided.", "ebuild"], "has": ["has <item> <item\nlist>\nIf item is in item list, then has returns 0. Otherwise, 1 is returned. There is another version, hasv, that will conditionally echo item. The item list is delimited by the IFS variable. This variable has a default value of ' ', or a space. It is a bash(1) setting.", "ebuild"], "hasv": ["hasv <item> <item\nlist>\nLike has, but also echoes item when has returns true. Banned in EAPI 8.", "ebuild"], "has_version": ["has_version [-b] [-d] [-r]\n[--host-root]\n<category/package-version>\nCheck to see if category/package-version is installed. The parameter accepts all values that are acceptable in the DEPEND variable. The function returns 0 if category/package-version is installed, 1 otherwise. The package is searched for in ROOT by default.", "ebuild"], "best_version": ["best_version [-b] [-d] [-r]\n[--host-root] <package name>\nThis function will look up package name in the database of currently installed packages and echo the \"best version\" of the package that is found or nothing if no version is installed. The package is searched for in ROOT by default. It accepts the same options as has_version.", "ebuild"], "einfo": ["einfo \"disposable message\"\nSame as elog, but should be used when the message isn't important to the user (like progress or status messages during the build process).", "ebuild"], "elog": ["elog \"informative message\"\nIf you need to display a message that you wish the user to read and take notice of, then use elog. It works just like echo(1), but adds a little more to the output so as to catch the user's eye. The message will also be logged by portage for later review.", "ebuild"], "ewarn": ["ewarn \"warning message\"\nSame as einfo, but should be used when showing a warning to the user.", "ebuild"], "eqawarn": ["eqawarn \"QA warning message\"\nSame as einfo, but should be used when showing a QA warning to the user.", "ebuild"], "eerror": ["eerror \"error message\"\nSame as einfo, but should be used when showing an error to the user.", "ebuild"], "ebegin": ["ebegin \"helpful message\"\nLike einfo, we output a helpful message and then hint that the following operation may take some time to complete. Once the task is finished, you need to call eend.", "ebuild"], "eend": ["eend <status> [\"error\nmessage\"]\nFollowup the ebegin message with an appropriate \"OK\" or \"!!\" (for errors) marker. If status is non-zero, then the additional error message is displayed.", "ebuild"], "unpack": ["unpack <source> [list of more\nsources]\nThis function uncompresses and/or untars a list of sources into the current directory. The function will append source to the DISTDIR variable.", "ebuild"], "eapply": ["eapply [patch options]\n<files|directories>\nApplies patches to the ${WORKDIR} with specified options. Default patch level is -p1. If a directory specified, all patches from it with .patch or .diff suffix are applied. This function is available beginning with EAPI 6, replacing old epatch.eclass(5) functions.", "ebuild"], "eapply_user": ["eapply_user\nApplies user-provided patches to the ${WORKDIR} from Portage config directory tree. For directory syntax and applying rules, see /etc/portage/patches/ section in portage(5). This function is available beginning with EAPI 6, replacing old epatch.eclass(5) functions.", "ebuild"], "econf": ["econf [configure options]\nThis is used as a replacement for configure. Performs:", "ebuild"], "emake": ["emake [make options]\nThis must be used in place of `make` in ebuilds. Performs `${MAKE:-make} ${MAKEOPTS} make options ${EXTRA_EMAKE}`, and calls `die` automatically starting with EAPI 4.", "ebuild"], "einstall": ["einstall [make options]\nThis is used as a replacement for make install. Performs:", "ebuild"], "docompress": ["docompress [-x] <path> [list of more\npaths]\nBeginning with EAPI 4, the docompress helper is used to manage lists of files to be included or excluded from optional compression. If the first argument is -x, add each of its subsequent arguments to the exclusion list. Otherwise, add each argument to the inclusion list. The inclusion list initially contains /usr/share/doc, /usr/share/info, and /usr/share/man. The exclusion list initially contains /usr/share/doc/${PF}/html. The optional compression shall be carried out after src_install has completed, and before the execution of any subsequent phase function. For each item in the inclusion list, pretend it has the value of the D variable prepended, then:  If it is a directory, act as if every file or directory immediately under this directory were in the inclusion list. If the item is a file, it may be compressed unless it has been excluded as described below. If the item does not exist, it is ignored.  Whether an item is to be excluded is determined as follows: For each item in the exclusion list, pretend it has the value of the D variable prepended, then:  If it is a directory, act as if every file or directory immediately under this directory were in the exclusion list. If the item is a file, it shall not be compressed. If the item does not exist, it is ignored.", "ebuild"], "dosed": ["dosed \"s:orig:change:g\"\n<filename>\nBeginning with EAPI 4, the dosed helper no longer exists. Ebuilds should call sed(1) directly (and assume that it is GNU sed).", "ebuild"], "dodir": ["dodir <path> [more paths]\nCreates directories inside of ${ED}. 'dodir /usr/lib/apache' creates ${ED}/usr/lib/apache. Note that the do* functions will run dodir for you. If this directory will be empty when it is merged, then please use keepdir instead.", "ebuild"], "diropts": ["diropts [options for install(1)]\nCan be used to define options for the install function used in dodir. The default is -m0755.", "ebuild"], "into": ["into <path>\nSets the root (DESTTREE) for other functions like dobin, dosbin, doman, doinfo, dolib. The default root is /usr.", "ebuild"], "keepdir": ["keepdir <path> [more paths]\nSimilar to dodir, but used to create directories that would otherwise be empty. The treatment of completely-empty directories is undefined by PMS, and using keepdir ensures that they are tracked.", "ebuild"], "dobin": ["dobin <binary> [list of more\nbinaries]\nInstalls a binary or a list of binaries into DESTTREE/bin. Creates all necessary dirs.", "ebuild"], "dosbin": ["dosbin <binary> [list of more\nbinaries]\nInstalls a binary or a list of binaries into DESTTREE/sbin. Creates all necessary dirs.", "ebuild"], "doinitd": ["doinitd <init.d script> [list of more init.d\nscripts]\nInstall Gentoo init.d scripts. They will be installed into the correct location for Gentoo init.d scripts (/etc/init.d/). Creates all necessary dirs.", "ebuild"], "doconfd": ["doconfd <conf.d file> [list of more conf.d\nfile]\nInstall Gentoo conf.d files. They will be installed into the correct location for Gentoo conf.d files (/etc/conf.d/). Creates all necessary dirs.", "ebuild"], "doenvd": ["doenvd <env.d entry> [list of more env.d\nentries]\nInstall Gentoo env.d entries. They will be installed into the correct location for Gentoo env.d entries (/etc/env.d/). Creates all necessary dirs.", "ebuild"], "dolib": ["dolib <library> [list of more\nlibraries]\n", "ebuild"], "dolib.a": ["dolib.a <library> [list of more\nlibraries]\n", "ebuild"], "dolib.so": ["dolib.so <library> [list of more\nlibraries]\n", "ebuild"], "libopts": ["libopts [options for install(1)]\nCan be used to define options for the install function used in the dolib functions. The default is -m0644. libopts is banned in EAPI 7.", "ebuild"], "doman": ["doman [-i18n=<locale>]\n<man-page> [list of more man-pages]\nInstalls manual-pages into /usr/share/man/man[0-9n] depending on the manual file ending. The files are compressed if they are not already. You can specify locale-specific manpages with the -i18n option. Then the man-page will be installed into /usr/share/man/<locale>/man[0-9n]. Beginning with EAPI 2, a locale-specific manpage which contains a locale in the file name will be installed in /usr/share/man/<locale>/man[0-9n], with the locale portion of the file name removed, and the -i18n option has no effect. For example, with EAPI 2, a manpage named foo.<locale>.1 will be installed as /usr/share/man/<locale>/man1/foo.1. Beginning with EAPI 4, the -i18n option takes precedence over the locale suffix of the file name.", "ebuild"], "dohard": ["dohard <filename>\n<linkname>\nBeginning with EAPI 4, the dohard helper no longer exists. Ebuilds should call ln(1) directly.", "ebuild"], "dosym": ["dosym [-r] <filename>\n<linkname>\n", "ebuild"], "doheader": ["doheader [-r] <file> [list of more\nfiles]\nInstalls the given header files into /usr/include/, by default with file mode 0644 (this can be overridden with the insopts function). Setting -r sets recursive. The doheader helper is available beginning with EAPI 5.", "ebuild"], "dohtml": ["dohtml [-a filetypes] [-r] [-x list-of-dirs-to-ignore]\n[list-of-files-and-dirs]\nInstalls the files in the list of files (space-separated list) into /usr/share/doc/${PF}/html provided the file ends in .htm, .html, .css, .js, .gif, .jpeg, .jpg, or .png. Setting -a limits what types of files will be included, -A appends to the default list, setting -x sets which dirs to exclude (CVS excluded by default), -p sets a document prefix, -r sets recursive. dohtml is banned in EAPI 7: use dodoc and docinto instead.", "ebuild"], "doinfo": ["doinfo <info-file> [list of more\ninfo-files]\nInstalls info-pages into DESTDIR/info. Files are automatically gzipped. Creates all necessary dirs.", "ebuild"], "domo": ["domo <locale-file> [list of more\nlocale-files]\nInstalls locale-files into DESTDIR/usr/share/locale/[LANG] depending on local-file's ending. Creates all necessary dirs.", "ebuild"], "fowners": ["fowners [-h|-H|-L|-P|-R] [user][:group]\n<file> [files]\n", "ebuild"], "fperms": ["fperms [-R] <permissions> <file>\n[files]\n", "ebuild"], "insinto": ["insinto [path]\nSets the destination path for the doins function. The default path is /.", "ebuild"], "insopts": ["insopts [options for install(1)]\nCan be used to define options for the install function used in doins. The default is -m0644.", "ebuild"], "doins": ["doins [-r] <file> [list of more\nfiles]\nInstalls files into the path controlled by insinto. This function uses install(1). Creates all necessary dirs. Setting -r sets recursive. Beginning with EAPI 4, both doins and newins preserve symlinks. In EAPI 3 and earlier, symlinks are dereferenced rather than preserved.", "ebuild"], "exeinto": ["exeinto [path]\nSets the destination path for the doexe function. The default path is /.", "ebuild"], "exeopts": ["exeopts [options for install(1)]\nCan be used to define options for the install function used in doexe. The default is -m0755.", "ebuild"], "doexe": ["doexe <executable> [list of more\nexecutables]\nInstalls executables into the path controlled by exeinto. This function uses install(1). Creates all necessary dirs. Behavior is undefined if exeinto has not yet been called.", "ebuild"], "docinto": ["docinto [path]\nSets the subdir used by dodoc and dohtml when installing into the document tree (based in /usr/share/doc/${PF}/). Default is no subdir, or just \"\".", "ebuild"], "dodoc": ["dodoc [-r] <document> [list of more\ndocuments]\nInstalls a document or a list of documents into /usr/share/doc/${PF}/<docinto path>. Documents are marked for compression. Creates all necessary dirs. Beginning with EAPI 4, there is support for recursion, enabled by the new -r option.", "ebuild"]}